{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2f135ce6-be3e-4d13-b94c-1bbf404d5bb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "df=pd.read_csv('/Users/rui/Downloads/GoogleStockPrices.csv')\n",
    "df['volume']=np.log1p(df['Volume'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8b7b30ca-4d2d-47f4-a7ba-938f743154cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-02 16:00:00</td>\n",
       "      <td>26.63</td>\n",
       "      <td>26.79</td>\n",
       "      <td>26.39</td>\n",
       "      <td>26.48</td>\n",
       "      <td>1327870</td>\n",
       "      <td>14.099087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-05 16:00:00</td>\n",
       "      <td>26.36</td>\n",
       "      <td>26.40</td>\n",
       "      <td>25.89</td>\n",
       "      <td>25.97</td>\n",
       "      <td>2059119</td>\n",
       "      <td>14.537789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-06 16:00:00</td>\n",
       "      <td>26.02</td>\n",
       "      <td>26.06</td>\n",
       "      <td>25.28</td>\n",
       "      <td>25.33</td>\n",
       "      <td>2731813</td>\n",
       "      <td>14.820476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-07 16:00:00</td>\n",
       "      <td>25.55</td>\n",
       "      <td>25.57</td>\n",
       "      <td>25.18</td>\n",
       "      <td>25.26</td>\n",
       "      <td>2345875</td>\n",
       "      <td>14.668169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-08 16:00:00</td>\n",
       "      <td>25.08</td>\n",
       "      <td>25.38</td>\n",
       "      <td>24.75</td>\n",
       "      <td>25.35</td>\n",
       "      <td>3662224</td>\n",
       "      <td>15.113581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>2024-12-24 13:05:00</td>\n",
       "      <td>194.84</td>\n",
       "      <td>196.11</td>\n",
       "      <td>193.78</td>\n",
       "      <td>196.11</td>\n",
       "      <td>10403259</td>\n",
       "      <td>16.157630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>2024-12-26 16:00:00</td>\n",
       "      <td>195.15</td>\n",
       "      <td>196.75</td>\n",
       "      <td>194.38</td>\n",
       "      <td>195.60</td>\n",
       "      <td>12057210</td>\n",
       "      <td>16.305173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>2024-12-27 16:00:00</td>\n",
       "      <td>194.95</td>\n",
       "      <td>195.32</td>\n",
       "      <td>190.65</td>\n",
       "      <td>192.76</td>\n",
       "      <td>18891362</td>\n",
       "      <td>16.754215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>2024-12-30 16:00:00</td>\n",
       "      <td>189.80</td>\n",
       "      <td>192.55</td>\n",
       "      <td>189.12</td>\n",
       "      <td>191.24</td>\n",
       "      <td>14264659</td>\n",
       "      <td>16.473296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>2024-12-31 16:00:00</td>\n",
       "      <td>191.08</td>\n",
       "      <td>191.96</td>\n",
       "      <td>188.51</td>\n",
       "      <td>189.30</td>\n",
       "      <td>17466919</td>\n",
       "      <td>16.675819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2516 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Date    Open    High     Low   Close    Volume     volume\n",
       "0     2015-01-02 16:00:00   26.63   26.79   26.39   26.48   1327870  14.099087\n",
       "1     2015-01-05 16:00:00   26.36   26.40   25.89   25.97   2059119  14.537789\n",
       "2     2015-01-06 16:00:00   26.02   26.06   25.28   25.33   2731813  14.820476\n",
       "3     2015-01-07 16:00:00   25.55   25.57   25.18   25.26   2345875  14.668169\n",
       "4     2015-01-08 16:00:00   25.08   25.38   24.75   25.35   3662224  15.113581\n",
       "...                   ...     ...     ...     ...     ...       ...        ...\n",
       "2511  2024-12-24 13:05:00  194.84  196.11  193.78  196.11  10403259  16.157630\n",
       "2512  2024-12-26 16:00:00  195.15  196.75  194.38  195.60  12057210  16.305173\n",
       "2513  2024-12-27 16:00:00  194.95  195.32  190.65  192.76  18891362  16.754215\n",
       "2514  2024-12-30 16:00:00  189.80  192.55  189.12  191.24  14264659  16.473296\n",
       "2515  2024-12-31 16:00:00  191.08  191.96  188.51  189.30  17466919  16.675819\n",
       "\n",
       "[2516 rows x 7 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fe80cde7-9017-4e09-bf20-5fafa541766a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2516, 7)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a12171cb-542b-4156-a387-1174955d6772",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date      0\n",
       "Open      0\n",
       "High      0\n",
       "Low       0\n",
       "Close     0\n",
       "Volume    0\n",
       "volume    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dd1fa5b7-d494-4c45-b630-17a9503f8799",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date                 Open    High    Low     Close   Volume    volume   \n",
       "2015-01-02 16:00:00  26.63   26.79   26.39   26.48   1327870   14.099087    1\n",
       "2021-09-07 16:00:00  143.83  144.57  143.62  144.28  1006595   13.822085    1\n",
       "2021-08-26 16:00:00  141.75  142.42  141.36  141.44  1030466   13.845523    1\n",
       "2021-08-27 16:00:00  141.65  144.51  141.50  144.00  1439010   14.179467    1\n",
       "2021-08-30 16:00:00  144.40  145.97  144.16  144.59  1221710   14.015763    1\n",
       "                                                                           ..\n",
       "2018-05-02 16:00:00  51.70   52.20   51.16   51.30   1734872   14.366445    1\n",
       "2018-05-03 16:00:00  51.27   51.53   50.39   51.32   1964066   14.490528    1\n",
       "2018-05-04 16:00:00  50.98   52.59   50.90   52.55   1844600   14.427774    1\n",
       "2018-05-07 16:00:00  52.69   53.25   52.51   52.97   1719971   14.357819    1\n",
       "2024-12-31 16:00:00  191.08  191.96  188.51  189.30  17466919  16.675819    1\n",
       "Name: count, Length: 2516, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c05e2ee6-b467-47b5-973e-7c9617ea4341",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2516.000000</td>\n",
       "      <td>2516.000000</td>\n",
       "      <td>2516.000000</td>\n",
       "      <td>2516.000000</td>\n",
       "      <td>2.516000e+03</td>\n",
       "      <td>2516.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>82.678052</td>\n",
       "      <td>83.560413</td>\n",
       "      <td>81.831208</td>\n",
       "      <td>82.714996</td>\n",
       "      <td>8.797572e+06</td>\n",
       "      <td>15.033039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>43.716508</td>\n",
       "      <td>44.214494</td>\n",
       "      <td>43.257158</td>\n",
       "      <td>43.735891</td>\n",
       "      <td>1.365305e+07</td>\n",
       "      <td>1.270717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>24.960000</td>\n",
       "      <td>25.010000</td>\n",
       "      <td>24.550000</td>\n",
       "      <td>24.850000</td>\n",
       "      <td>4.656380e+05</td>\n",
       "      <td>13.051166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>47.367500</td>\n",
       "      <td>47.637500</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>47.380000</td>\n",
       "      <td>1.398751e+06</td>\n",
       "      <td>14.151091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>64.530000</td>\n",
       "      <td>65.045000</td>\n",
       "      <td>63.935000</td>\n",
       "      <td>64.710000</td>\n",
       "      <td>1.876044e+06</td>\n",
       "      <td>14.444676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>119.665000</td>\n",
       "      <td>121.042500</td>\n",
       "      <td>118.592500</td>\n",
       "      <td>119.700000</td>\n",
       "      <td>6.056782e+06</td>\n",
       "      <td>15.616689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>197.250000</td>\n",
       "      <td>201.420000</td>\n",
       "      <td>194.980000</td>\n",
       "      <td>196.660000</td>\n",
       "      <td>1.194550e+08</td>\n",
       "      <td>18.598450</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Open         High          Low        Close        Volume  \\\n",
       "count  2516.000000  2516.000000  2516.000000  2516.000000  2.516000e+03   \n",
       "mean     82.678052    83.560413    81.831208    82.714996  8.797572e+06   \n",
       "std      43.716508    44.214494    43.257158    43.735891  1.365305e+07   \n",
       "min      24.960000    25.010000    24.550000    24.850000  4.656380e+05   \n",
       "25%      47.367500    47.637500    47.000000    47.380000  1.398751e+06   \n",
       "50%      64.530000    65.045000    63.935000    64.710000  1.876044e+06   \n",
       "75%     119.665000   121.042500   118.592500   119.700000  6.056782e+06   \n",
       "max     197.250000   201.420000   194.980000   196.660000  1.194550e+08   \n",
       "\n",
       "            volume  \n",
       "count  2516.000000  \n",
       "mean     15.033039  \n",
       "std       1.270717  \n",
       "min      13.051166  \n",
       "25%      14.151091  \n",
       "50%      14.444676  \n",
       "75%      15.616689  \n",
       "max      18.598450  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0125758c-9d70-4231-b1ba-36904081a27a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df.drop(columns=['Date','Volume','volume'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "09455e31-fb67-4e11-adf5-1197d92dc87b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26.63</td>\n",
       "      <td>26.79</td>\n",
       "      <td>26.39</td>\n",
       "      <td>26.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26.36</td>\n",
       "      <td>26.40</td>\n",
       "      <td>25.89</td>\n",
       "      <td>25.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26.02</td>\n",
       "      <td>26.06</td>\n",
       "      <td>25.28</td>\n",
       "      <td>25.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25.55</td>\n",
       "      <td>25.57</td>\n",
       "      <td>25.18</td>\n",
       "      <td>25.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25.08</td>\n",
       "      <td>25.38</td>\n",
       "      <td>24.75</td>\n",
       "      <td>25.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>194.84</td>\n",
       "      <td>196.11</td>\n",
       "      <td>193.78</td>\n",
       "      <td>196.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>195.15</td>\n",
       "      <td>196.75</td>\n",
       "      <td>194.38</td>\n",
       "      <td>195.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>194.95</td>\n",
       "      <td>195.32</td>\n",
       "      <td>190.65</td>\n",
       "      <td>192.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>189.80</td>\n",
       "      <td>192.55</td>\n",
       "      <td>189.12</td>\n",
       "      <td>191.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>191.08</td>\n",
       "      <td>191.96</td>\n",
       "      <td>188.51</td>\n",
       "      <td>189.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2516 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Open    High     Low   Close\n",
       "0      26.63   26.79   26.39   26.48\n",
       "1      26.36   26.40   25.89   25.97\n",
       "2      26.02   26.06   25.28   25.33\n",
       "3      25.55   25.57   25.18   25.26\n",
       "4      25.08   25.38   24.75   25.35\n",
       "...      ...     ...     ...     ...\n",
       "2511  194.84  196.11  193.78  196.11\n",
       "2512  195.15  196.75  194.38  195.60\n",
       "2513  194.95  195.32  190.65  192.76\n",
       "2514  189.80  192.55  189.12  191.24\n",
       "2515  191.08  191.96  188.51  189.30\n",
       "\n",
       "[2516 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "61ff73a6-9c5b-47ef-bd04-665fdedb7430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       14.099087\n",
       "1       14.537789\n",
       "2       14.820476\n",
       "3       14.668169\n",
       "4       15.113581\n",
       "          ...    \n",
       "2511    16.157630\n",
       "2512    16.305173\n",
       "2513    16.754215\n",
       "2514    16.473296\n",
       "2515    16.675819\n",
       "Name: volume, Length: 2516, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=df['volume']\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "060354d8-fa39-4538-a09b-b02c2ceb56b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2196</th>\n",
       "      <td>129.83</td>\n",
       "      <td>131.17</td>\n",
       "      <td>128.96</td>\n",
       "      <td>131.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>79.25</td>\n",
       "      <td>80.67</td>\n",
       "      <td>78.87</td>\n",
       "      <td>80.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>57.02</td>\n",
       "      <td>57.44</td>\n",
       "      <td>56.33</td>\n",
       "      <td>56.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>900</th>\n",
       "      <td>61.59</td>\n",
       "      <td>62.06</td>\n",
       "      <td>60.81</td>\n",
       "      <td>61.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>930</th>\n",
       "      <td>59.10</td>\n",
       "      <td>59.53</td>\n",
       "      <td>58.31</td>\n",
       "      <td>58.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1638</th>\n",
       "      <td>127.16</td>\n",
       "      <td>127.28</td>\n",
       "      <td>126.15</td>\n",
       "      <td>126.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1095</th>\n",
       "      <td>58.44</td>\n",
       "      <td>58.81</td>\n",
       "      <td>57.32</td>\n",
       "      <td>58.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1130</th>\n",
       "      <td>55.05</td>\n",
       "      <td>55.43</td>\n",
       "      <td>54.77</td>\n",
       "      <td>55.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1294</th>\n",
       "      <td>71.55</td>\n",
       "      <td>71.84</td>\n",
       "      <td>69.02</td>\n",
       "      <td>69.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>56.93</td>\n",
       "      <td>57.89</td>\n",
       "      <td>56.85</td>\n",
       "      <td>57.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1761 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Open    High     Low   Close\n",
       "2196  129.83  131.17  128.96  131.11\n",
       "1462   79.25   80.67   78.87   80.33\n",
       "764    57.02   57.44   56.33   56.54\n",
       "900    61.59   62.06   60.81   61.36\n",
       "930    59.10   59.53   58.31   58.58\n",
       "...      ...     ...     ...     ...\n",
       "1638  127.16  127.28  126.15  126.47\n",
       "1095   58.44   58.81   57.32   58.38\n",
       "1130   55.05   55.43   54.77   55.00\n",
       "1294   71.55   71.84   69.02   69.32\n",
       "860    56.93   57.89   56.85   57.65\n",
       "\n",
       "[1761 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import xgboost\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)\n",
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f3c2b98a-ccd0-4887-9cc1-906edc20db27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2196    16.815964\n",
       "1462    14.238012\n",
       "764     14.416049\n",
       "900     14.493093\n",
       "930     14.395396\n",
       "          ...    \n",
       "1638    14.000289\n",
       "1095    14.274492\n",
       "1130    14.196990\n",
       "1294    14.762899\n",
       "860     14.620960\n",
       "Name: volume, Length: 1761, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0abb83a0-aa69-4b9b-abbb-7a49c3e16a30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>617</th>\n",
       "      <td>47.40</td>\n",
       "      <td>48.03</td>\n",
       "      <td>47.02</td>\n",
       "      <td>48.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>927</th>\n",
       "      <td>58.60</td>\n",
       "      <td>59.43</td>\n",
       "      <td>58.46</td>\n",
       "      <td>58.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>942</th>\n",
       "      <td>60.20</td>\n",
       "      <td>60.42</td>\n",
       "      <td>59.89</td>\n",
       "      <td>60.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>53.66</td>\n",
       "      <td>53.71</td>\n",
       "      <td>52.02</td>\n",
       "      <td>52.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968</th>\n",
       "      <td>96.43</td>\n",
       "      <td>98.31</td>\n",
       "      <td>94.69</td>\n",
       "      <td>94.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1954</th>\n",
       "      <td>100.68</td>\n",
       "      <td>102.93</td>\n",
       "      <td>100.59</td>\n",
       "      <td>101.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>514</th>\n",
       "      <td>41.49</td>\n",
       "      <td>41.49</td>\n",
       "      <td>41.20</td>\n",
       "      <td>41.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>40.00</td>\n",
       "      <td>40.28</td>\n",
       "      <td>39.82</td>\n",
       "      <td>40.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1576</th>\n",
       "      <td>113.20</td>\n",
       "      <td>113.59</td>\n",
       "      <td>112.15</td>\n",
       "      <td>112.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>313</th>\n",
       "      <td>37.86</td>\n",
       "      <td>38.50</td>\n",
       "      <td>37.76</td>\n",
       "      <td>38.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>755 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Open    High     Low   Close\n",
       "617    47.40   48.03   47.02   48.01\n",
       "927    58.60   59.43   58.46   58.88\n",
       "942    60.20   60.42   59.89   60.35\n",
       "973    53.66   53.71   52.02   52.47\n",
       "1968   96.43   98.31   94.69   94.93\n",
       "...      ...     ...     ...     ...\n",
       "1954  100.68  102.93  100.59  101.42\n",
       "514    41.49   41.49   41.20   41.45\n",
       "409    40.00   40.28   39.82   40.27\n",
       "1576  113.20  113.59  112.15  112.52\n",
       "313    37.86   38.50   37.76   38.48\n",
       "\n",
       "[755 rows x 4 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6ff25db7-2758-4463-98ed-9e5842bec756",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "617     14.702430\n",
       "927     14.306046\n",
       "942     14.392551\n",
       "973     14.346193\n",
       "1968    18.296013\n",
       "          ...    \n",
       "1954    16.921172\n",
       "514     13.842833\n",
       "409     13.879490\n",
       "1576    14.175431\n",
       "313     14.275274\n",
       "Name: volume, Length: 755, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "aed80137-dd58-49a0-aefd-c3f5d67c456a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-15 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-15 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-15 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-15 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-15 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-15 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-15 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-15 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-15 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-15 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-15 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-15 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-15 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-15 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-15 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-15 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-15\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=None, shuffle=False),\n",
       "             estimator=Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                                       (&#x27;clf&#x27;,\n",
       "                                        XGBRegressor(base_score=None,\n",
       "                                                     booster=None,\n",
       "                                                     callbacks=None,\n",
       "                                                     colsample_bylevel=None,\n",
       "                                                     colsample_bynode=None,\n",
       "                                                     colsample_bytree=None,\n",
       "                                                     device=None,\n",
       "                                                     early_stopping_rounds=None,\n",
       "                                                     enable_categorical=False,\n",
       "                                                     eval_metric=None,\n",
       "                                                     feature_types=Non...\n",
       "                                                     max_cat_to_onehot=None,\n",
       "                                                     max_delta_step=None,\n",
       "                                                     max_depth=None,\n",
       "                                                     max_leaves=None,\n",
       "                                                     min_child_weight=None,\n",
       "                                                     missing=nan,\n",
       "                                                     monotone_constraints=None,\n",
       "                                                     multi_strategy=None,\n",
       "                                                     n_estimators=100,\n",
       "                                                     n_jobs=None,\n",
       "                                                     num_parallel_tree=None,\n",
       "                                                     random_state=42, ...))]),\n",
       "             param_grid={&#x27;clf__learning_rate&#x27;: [0.1, 0.5, 0.7],\n",
       "                         &#x27;clf__max_depth&#x27;: [3, 5, 7],\n",
       "                         &#x27;clf__n_estimators&#x27;: [50, 100, 200]},\n",
       "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-52\" type=\"checkbox\" ><label for=\"sk-estimator-id-52\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=None, shuffle=False),\n",
       "             estimator=Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                                       (&#x27;clf&#x27;,\n",
       "                                        XGBRegressor(base_score=None,\n",
       "                                                     booster=None,\n",
       "                                                     callbacks=None,\n",
       "                                                     colsample_bylevel=None,\n",
       "                                                     colsample_bynode=None,\n",
       "                                                     colsample_bytree=None,\n",
       "                                                     device=None,\n",
       "                                                     early_stopping_rounds=None,\n",
       "                                                     enable_categorical=False,\n",
       "                                                     eval_metric=None,\n",
       "                                                     feature_types=Non...\n",
       "                                                     max_cat_to_onehot=None,\n",
       "                                                     max_delta_step=None,\n",
       "                                                     max_depth=None,\n",
       "                                                     max_leaves=None,\n",
       "                                                     min_child_weight=None,\n",
       "                                                     missing=nan,\n",
       "                                                     monotone_constraints=None,\n",
       "                                                     multi_strategy=None,\n",
       "                                                     n_estimators=100,\n",
       "                                                     n_jobs=None,\n",
       "                                                     num_parallel_tree=None,\n",
       "                                                     random_state=42, ...))]),\n",
       "             param_grid={&#x27;clf__learning_rate&#x27;: [0.1, 0.5, 0.7],\n",
       "                         &#x27;clf__max_depth&#x27;: [3, 5, 7],\n",
       "                         &#x27;clf__n_estimators&#x27;: [50, 100, 200]},\n",
       "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-53\" type=\"checkbox\" ><label for=\"sk-estimator-id-53\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: Pipeline</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                (&#x27;clf&#x27;,\n",
       "                 XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "                              colsample_bylevel=None, colsample_bynode=None,\n",
       "                              colsample_bytree=None, device=None,\n",
       "                              early_stopping_rounds=None,\n",
       "                              enable_categorical=False, eval_metric=None,\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None, learning_rate=0.1,\n",
       "                              max_bin=None, max_cat_threshold=None,\n",
       "                              max_cat_to_onehot=None, max_delta_step=None,\n",
       "                              max_depth=3, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=50, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=42, ...))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-54\" type=\"checkbox\" ><label for=\"sk-estimator-id-54\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-55\" type=\"checkbox\" ><label for=\"sk-estimator-id-55\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBRegressor</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=3, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=50, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=KFold(n_splits=10, random_state=None, shuffle=False),\n",
       "             estimator=Pipeline(steps=[('scaler', StandardScaler()),\n",
       "                                       ('clf',\n",
       "                                        XGBRegressor(base_score=None,\n",
       "                                                     booster=None,\n",
       "                                                     callbacks=None,\n",
       "                                                     colsample_bylevel=None,\n",
       "                                                     colsample_bynode=None,\n",
       "                                                     colsample_bytree=None,\n",
       "                                                     device=None,\n",
       "                                                     early_stopping_rounds=None,\n",
       "                                                     enable_categorical=False,\n",
       "                                                     eval_metric=None,\n",
       "                                                     feature_types=Non...\n",
       "                                                     max_cat_to_onehot=None,\n",
       "                                                     max_delta_step=None,\n",
       "                                                     max_depth=None,\n",
       "                                                     max_leaves=None,\n",
       "                                                     min_child_weight=None,\n",
       "                                                     missing=nan,\n",
       "                                                     monotone_constraints=None,\n",
       "                                                     multi_strategy=None,\n",
       "                                                     n_estimators=100,\n",
       "                                                     n_jobs=None,\n",
       "                                                     num_parallel_tree=None,\n",
       "                                                     random_state=42, ...))]),\n",
       "             param_grid={'clf__learning_rate': [0.1, 0.5, 0.7],\n",
       "                         'clf__max_depth': [3, 5, 7],\n",
       "                         'clf__n_estimators': [50, 100, 200]},\n",
       "             scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "pipe=Pipeline([('scaler',StandardScaler()),('clf',XGBRegressor(n_estimators=100,random_state=42))])\n",
    "cv_strategy=KFold(n_splits=10)\n",
    "param_grid={'clf__max_depth':[3,5,7],\n",
    "           'clf__n_estimators':[50,100,200],\n",
    "           'clf__learning_rate':[0.1,0.5,0.7]\n",
    "           }\n",
    "grid_search=GridSearchCV(estimator=pipe,cv=cv_strategy,param_grid=param_grid,scoring='neg_mean_squared_error')\n",
    "grid_search.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "df3d77a7-d8cf-4822-ae23-28732cbe57b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(-0.7716739179527208)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "884ad8cb-af44-4715-bfe7-049438a3f46c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "Best parameters: OrderedDict([('model__learning_rate', 0.02775189571289259), ('model__max_depth', 4), ('model__n_estimators', 173)])\n",
      "Best CV score (neg MSE): -0.7916947644263276\n"
     ]
    }
   ],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "from skopt import BayesSearchCV\n",
    "from skopt.space import Real, Integer\n",
    "\n",
    "# Define pipeline\n",
    "pipe = Pipeline([\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('model', XGBRegressor())\n",
    "])\n",
    "\n",
    "# Define time series split CV\n",
    "cv_strategy = TimeSeriesSplit(n_splits=3)\n",
    "\n",
    "# Define search space for hyperparameters\n",
    "param_space = {\n",
    "    'model__n_estimators': Integer(100, 300),\n",
    "    'model__max_depth': Integer(3, 7),\n",
    "    'model__learning_rate': Real(0.01, 0.1, prior='log-uniform')\n",
    "}\n",
    "\n",
    "# Set up BayesSearchCV\n",
    "bayes_search = BayesSearchCV(\n",
    "    estimator=pipe,\n",
    "    search_spaces=param_space,\n",
    "    n_iter=20,               # Number of parameter settings that are sampled\n",
    "    cv=cv_strategy,\n",
    "    scoring='neg_mean_squared_error',\n",
    "    random_state=42,\n",
    "    n_jobs=-1,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Fit the search\n",
    "bayes_search.fit(x_train, y_train)\n",
    "\n",
    "# Best parameters and best score\n",
    "print(\"Best parameters:\", bayes_search.best_params_)\n",
    "print(\"Best CV score (neg MSE):\", bayes_search.best_score_)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7c1e5fa9-ddfd-410e-b028-712f786cccf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-6 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-6 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-6 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-6 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-6 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                (&#x27;model&#x27;,\n",
       "                 XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "                              colsample_bylevel=None, colsample_bynode=None,\n",
       "                              colsample_bytree=None, device=None,\n",
       "                              early_stopping_rounds=None,\n",
       "                              enable_categorical=False, eval_metric=None,\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None,\n",
       "                              learning_rate=0.02775189571289259, max_bin=None,\n",
       "                              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "                              max_delta_step=None, max_depth=4, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=173, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=None, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                (&#x27;model&#x27;,\n",
       "                 XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "                              colsample_bylevel=None, colsample_bynode=None,\n",
       "                              colsample_bytree=None, device=None,\n",
       "                              early_stopping_rounds=None,\n",
       "                              enable_categorical=False, eval_metric=None,\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None,\n",
       "                              learning_rate=0.02775189571289259, max_bin=None,\n",
       "                              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "                              max_delta_step=None, max_depth=4, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=173, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=None, ...))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBRegressor</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.02775189571289259,\n",
       "             max_bin=None, max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=4, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=173, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('scaler', StandardScaler()),\n",
       "                ('model',\n",
       "                 XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "                              colsample_bylevel=None, colsample_bynode=None,\n",
       "                              colsample_bytree=None, device=None,\n",
       "                              early_stopping_rounds=None,\n",
       "                              enable_categorical=False, eval_metric=None,\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None,\n",
       "                              learning_rate=0.02775189571289259, max_bin=None,\n",
       "                              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "                              max_delta_step=None, max_depth=4, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=173, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=None, ...))])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bayes_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "34aa5c35-e636-473b-99f9-29e8d451bcf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2516 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Date   Open   High    Low  Close  Volume  volume\n",
       "0     False  False  False  False  False   False   False\n",
       "1     False  False  False  False  False   False   False\n",
       "2     False  False  False  False  False   False   False\n",
       "3     False  False  False  False  False   False   False\n",
       "4     False  False  False  False  False   False   False\n",
       "...     ...    ...    ...    ...    ...     ...     ...\n",
       "2511  False  False  False  False  False   False   False\n",
       "2512  False  False  False  False  False   False   False\n",
       "2513  False  False  False  False  False   False   False\n",
       "2514  False  False  False  False  False   False   False\n",
       "2515  False  False  False  False  False   False   False\n",
       "\n",
       "[2516 rows x 7 columns]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "0069fe13-61de-42cd-afb8-3dc0bd82a03c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-02 16:00:00</td>\n",
       "      <td>26.63</td>\n",
       "      <td>26.79</td>\n",
       "      <td>26.39</td>\n",
       "      <td>26.48</td>\n",
       "      <td>1327870</td>\n",
       "      <td>14.099087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-05 16:00:00</td>\n",
       "      <td>26.36</td>\n",
       "      <td>26.40</td>\n",
       "      <td>25.89</td>\n",
       "      <td>25.97</td>\n",
       "      <td>2059119</td>\n",
       "      <td>14.537789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-06 16:00:00</td>\n",
       "      <td>26.02</td>\n",
       "      <td>26.06</td>\n",
       "      <td>25.28</td>\n",
       "      <td>25.33</td>\n",
       "      <td>2731813</td>\n",
       "      <td>14.820476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-07 16:00:00</td>\n",
       "      <td>25.55</td>\n",
       "      <td>25.57</td>\n",
       "      <td>25.18</td>\n",
       "      <td>25.26</td>\n",
       "      <td>2345875</td>\n",
       "      <td>14.668169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-08 16:00:00</td>\n",
       "      <td>25.08</td>\n",
       "      <td>25.38</td>\n",
       "      <td>24.75</td>\n",
       "      <td>25.35</td>\n",
       "      <td>3662224</td>\n",
       "      <td>15.113581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>2024-12-24 13:05:00</td>\n",
       "      <td>194.84</td>\n",
       "      <td>196.11</td>\n",
       "      <td>193.78</td>\n",
       "      <td>196.11</td>\n",
       "      <td>10403259</td>\n",
       "      <td>16.157630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>2024-12-26 16:00:00</td>\n",
       "      <td>195.15</td>\n",
       "      <td>196.75</td>\n",
       "      <td>194.38</td>\n",
       "      <td>195.60</td>\n",
       "      <td>12057210</td>\n",
       "      <td>16.305173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>2024-12-27 16:00:00</td>\n",
       "      <td>194.95</td>\n",
       "      <td>195.32</td>\n",
       "      <td>190.65</td>\n",
       "      <td>192.76</td>\n",
       "      <td>18891362</td>\n",
       "      <td>16.754215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>2024-12-30 16:00:00</td>\n",
       "      <td>189.80</td>\n",
       "      <td>192.55</td>\n",
       "      <td>189.12</td>\n",
       "      <td>191.24</td>\n",
       "      <td>14264659</td>\n",
       "      <td>16.473296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>2024-12-31 16:00:00</td>\n",
       "      <td>191.08</td>\n",
       "      <td>191.96</td>\n",
       "      <td>188.51</td>\n",
       "      <td>189.30</td>\n",
       "      <td>17466919</td>\n",
       "      <td>16.675819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2516 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Date    Open    High     Low   Close    Volume     volume\n",
       "0     2015-01-02 16:00:00   26.63   26.79   26.39   26.48   1327870  14.099087\n",
       "1     2015-01-05 16:00:00   26.36   26.40   25.89   25.97   2059119  14.537789\n",
       "2     2015-01-06 16:00:00   26.02   26.06   25.28   25.33   2731813  14.820476\n",
       "3     2015-01-07 16:00:00   25.55   25.57   25.18   25.26   2345875  14.668169\n",
       "4     2015-01-08 16:00:00   25.08   25.38   24.75   25.35   3662224  15.113581\n",
       "...                   ...     ...     ...     ...     ...       ...        ...\n",
       "2511  2024-12-24 13:05:00  194.84  196.11  193.78  196.11  10403259  16.157630\n",
       "2512  2024-12-26 16:00:00  195.15  196.75  194.38  195.60  12057210  16.305173\n",
       "2513  2024-12-27 16:00:00  194.95  195.32  190.65  192.76  18891362  16.754215\n",
       "2514  2024-12-30 16:00:00  189.80  192.55  189.12  191.24  14264659  16.473296\n",
       "2515  2024-12-31 16:00:00  191.08  191.96  188.51  189.30  17466919  16.675819\n",
       "\n",
       "[2516 rows x 7 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "e5b40d93-e843-4b54-b99d-61b51d79c589",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date      0.0\n",
       "Open      0.0\n",
       "High      0.0\n",
       "Low       0.0\n",
       "Close     0.0\n",
       "Volume    0.0\n",
       "volume    0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()/df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f4b8451b-19c3-4d8b-993c-074e778acdff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "960a0172-befc-446e-bbed-1ef8d88b8146",
   "metadata": {},
   "outputs": [],
   "source": [
    "def RSI(df,column='Close',period=14):\n",
    "    delta=df['Close'].diff()\n",
    "    gain=delta.where(delta>0,0)\n",
    "    loss=-delta.where(delta<0,0)\n",
    "    avg_gain=pd.Series(gain).rolling(window=period).mean()\n",
    "    avg_loss=pd.Series(loss).rolling(window=period).mean()\n",
    "    rs=avg_gain/avg_loss\n",
    "    rsi = 100 - (100 / (1 + rs))\n",
    "    return rsi\n",
    "df['RSI'] = RSI(df, 'Close', 14)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "9b3f7aa5-012b-452e-a121-b56dd978672b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0             NaN\n",
       "1             NaN\n",
       "2             NaN\n",
       "3             NaN\n",
       "4             NaN\n",
       "          ...    \n",
       "2511    70.555976\n",
       "2512    72.222222\n",
       "2513    67.213427\n",
       "2514    64.890223\n",
       "2515    54.545455\n",
       "Name: RSI, Length: 2516, dtype: float64"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['RSI']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "6ace1b20-b619-4fe2-8838-3c6aa58d7c13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.RSI(df, column='Close', period=14)>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RSI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6b42ca20-bf65-44f7-87f3-644f9caad550",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2a2b26d9-a9f5-4e06-b1cb-1c4094d489de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>volume</th>\n",
       "      <th>RSI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-02 16:00:00</td>\n",
       "      <td>26.63</td>\n",
       "      <td>26.79</td>\n",
       "      <td>26.39</td>\n",
       "      <td>26.48</td>\n",
       "      <td>1327870</td>\n",
       "      <td>14.099087</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-05 16:00:00</td>\n",
       "      <td>26.36</td>\n",
       "      <td>26.40</td>\n",
       "      <td>25.89</td>\n",
       "      <td>25.97</td>\n",
       "      <td>2059119</td>\n",
       "      <td>14.537789</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-06 16:00:00</td>\n",
       "      <td>26.02</td>\n",
       "      <td>26.06</td>\n",
       "      <td>25.28</td>\n",
       "      <td>25.33</td>\n",
       "      <td>2731813</td>\n",
       "      <td>14.820476</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-07 16:00:00</td>\n",
       "      <td>25.55</td>\n",
       "      <td>25.57</td>\n",
       "      <td>25.18</td>\n",
       "      <td>25.26</td>\n",
       "      <td>2345875</td>\n",
       "      <td>14.668169</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-08 16:00:00</td>\n",
       "      <td>25.08</td>\n",
       "      <td>25.38</td>\n",
       "      <td>24.75</td>\n",
       "      <td>25.35</td>\n",
       "      <td>3662224</td>\n",
       "      <td>15.113581</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>2024-12-24 13:05:00</td>\n",
       "      <td>194.84</td>\n",
       "      <td>196.11</td>\n",
       "      <td>193.78</td>\n",
       "      <td>196.11</td>\n",
       "      <td>10403259</td>\n",
       "      <td>16.157630</td>\n",
       "      <td>70.555976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>2024-12-26 16:00:00</td>\n",
       "      <td>195.15</td>\n",
       "      <td>196.75</td>\n",
       "      <td>194.38</td>\n",
       "      <td>195.60</td>\n",
       "      <td>12057210</td>\n",
       "      <td>16.305173</td>\n",
       "      <td>72.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>2024-12-27 16:00:00</td>\n",
       "      <td>194.95</td>\n",
       "      <td>195.32</td>\n",
       "      <td>190.65</td>\n",
       "      <td>192.76</td>\n",
       "      <td>18891362</td>\n",
       "      <td>16.754215</td>\n",
       "      <td>67.213427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>2024-12-30 16:00:00</td>\n",
       "      <td>189.80</td>\n",
       "      <td>192.55</td>\n",
       "      <td>189.12</td>\n",
       "      <td>191.24</td>\n",
       "      <td>14264659</td>\n",
       "      <td>16.473296</td>\n",
       "      <td>64.890223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>2024-12-31 16:00:00</td>\n",
       "      <td>191.08</td>\n",
       "      <td>191.96</td>\n",
       "      <td>188.51</td>\n",
       "      <td>189.30</td>\n",
       "      <td>17466919</td>\n",
       "      <td>16.675819</td>\n",
       "      <td>54.545455</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2516 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Date    Open    High     Low   Close    Volume  \\\n",
       "0     2015-01-02 16:00:00   26.63   26.79   26.39   26.48   1327870   \n",
       "1     2015-01-05 16:00:00   26.36   26.40   25.89   25.97   2059119   \n",
       "2     2015-01-06 16:00:00   26.02   26.06   25.28   25.33   2731813   \n",
       "3     2015-01-07 16:00:00   25.55   25.57   25.18   25.26   2345875   \n",
       "4     2015-01-08 16:00:00   25.08   25.38   24.75   25.35   3662224   \n",
       "...                   ...     ...     ...     ...     ...       ...   \n",
       "2511  2024-12-24 13:05:00  194.84  196.11  193.78  196.11  10403259   \n",
       "2512  2024-12-26 16:00:00  195.15  196.75  194.38  195.60  12057210   \n",
       "2513  2024-12-27 16:00:00  194.95  195.32  190.65  192.76  18891362   \n",
       "2514  2024-12-30 16:00:00  189.80  192.55  189.12  191.24  14264659   \n",
       "2515  2024-12-31 16:00:00  191.08  191.96  188.51  189.30  17466919   \n",
       "\n",
       "         volume        RSI  \n",
       "0     14.099087        NaN  \n",
       "1     14.537789        NaN  \n",
       "2     14.820476        NaN  \n",
       "3     14.668169        NaN  \n",
       "4     15.113581        NaN  \n",
       "...         ...        ...  \n",
       "2511  16.157630  70.555976  \n",
       "2512  16.305173  72.222222  \n",
       "2513  16.754215  67.213427  \n",
       "2514  16.473296  64.890223  \n",
       "2515  16.675819  54.545455  \n",
       "\n",
       "[2516 rows x 8 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "2c93312b-018c-43cc-a16e-dfb2656ebc99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Date']=pd.to_datetime(df['Date'])\n",
    "colors=np.where(df['RSI']>70,'red',np.where(df['RSI']<50,'blue','green'))\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.scatter(x=df['Date'],y=df['RSI'],color=colors)\n",
    "plt.xticks(fontsize=5,rotation=45)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "82e340d6-b6a9-4cfb-89a8-708154123de1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0             NaN\n",
       "1             NaN\n",
       "2             NaN\n",
       "3             NaN\n",
       "4             NaN\n",
       "          ...    \n",
       "2511    70.555976\n",
       "2512    72.222222\n",
       "2513    67.213427\n",
       "2514    64.890223\n",
       "2515    54.545455\n",
       "Name: RSI, Length: 2516, dtype: float64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['RSI']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "894f3dc6-0e38-49ba-8343-9d18618f3f45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(2503)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['RSI'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "83745d66-fbb1-4944-8e31-d01783245f4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_overbrought=(df['RSI']>70).sum()\n",
    "num_underbrought=(df['RSI']<30).sum()\n",
    "num_neutral =((df['RSI'] > 30) & (df['RSI'] < 70)).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "b222142e-34bf-4ed8-87b4-a3e68438e765",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(461)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_overbrought"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "ab5b98a8-ed31-4475-b600-9055af19acb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(145)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_underbrought"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "4967f921-8cb7-46cb-98bb-b951c7dd5ce3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(1897)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_neutral"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "35e3ad94-48e3-487d-8139-918659f62a0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def macd(df, column='Close'):\n",
    "    short_ema = df['Close'].ewm(span=12, adjust=False).mean()\n",
    "    long_ema = df['Close'].ewm(span=26, adjust=False).mean()\n",
    "    macd_line = short_ema - long_ema\n",
    "    signal_line = macd_line.ewm(span=9, adjust=False).mean()\n",
    "    macd_hist = macd_line - signal_line\n",
    "    \n",
    "    df['MACD'] = macd_line\n",
    "    df['Signal'] = signal_line\n",
    "    df['Hist'] = macd_hist\n",
    "    return dfc\n",
    "df = macd(df, 'Close')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "c66b35b8-3458-492f-938a-296e5466df10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Date', ylabel='Hist'>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(data=df,x=df['Date'],y=df['Hist'],color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "2e996d09-3d8d-49cd-838c-01ce166bdfe5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Date', ylabel='MACD'>"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(data=df,x=df['Date'],y=df['MACD'],color='blue')\n",
    "sns.lineplot(data=df,x=df['Date'],y=df['Signal'],color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "6ad0eca4-82da-4975-af16-2bc3eb4c374b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def stochastic(df,column='Close',k_period=14,d_period=3):\n",
    "    Low_min=df['Low'].rolling(window=k_period).min()\n",
    "    High_max=df['High'].rolling(window=k_period).max()\n",
    "    df['%K']=100*((df['Close']-Low_min)/(High_max-Low_min))\n",
    "    df['%D']=df['%K'].rolling(window=d_period).mean()\n",
    "    return df\n",
    "df=stochastic(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "9d53ffc2-91e2-4a0b-a050-16df7af40364",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>volume</th>\n",
       "      <th>RSI</th>\n",
       "      <th>RSI_prev</th>\n",
       "      <th>Buy</th>\n",
       "      <th>Sell</th>\n",
       "      <th>Buy_signal</th>\n",
       "      <th>Sell_signal</th>\n",
       "      <th>MACD</th>\n",
       "      <th>Signal</th>\n",
       "      <th>Hist</th>\n",
       "      <th>%K</th>\n",
       "      <th>%D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-02 16:00:00</td>\n",
       "      <td>26.63</td>\n",
       "      <td>26.79</td>\n",
       "      <td>26.39</td>\n",
       "      <td>26.48</td>\n",
       "      <td>1327870</td>\n",
       "      <td>14.099087</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-05 16:00:00</td>\n",
       "      <td>26.36</td>\n",
       "      <td>26.40</td>\n",
       "      <td>25.89</td>\n",
       "      <td>25.97</td>\n",
       "      <td>2059119</td>\n",
       "      <td>14.537789</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.040684</td>\n",
       "      <td>-0.008137</td>\n",
       "      <td>-0.032547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-06 16:00:00</td>\n",
       "      <td>26.02</td>\n",
       "      <td>26.06</td>\n",
       "      <td>25.28</td>\n",
       "      <td>25.33</td>\n",
       "      <td>2731813</td>\n",
       "      <td>14.820476</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.123149</td>\n",
       "      <td>-0.031139</td>\n",
       "      <td>-0.092010</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-07 16:00:00</td>\n",
       "      <td>25.55</td>\n",
       "      <td>25.57</td>\n",
       "      <td>25.18</td>\n",
       "      <td>25.26</td>\n",
       "      <td>2345875</td>\n",
       "      <td>14.668169</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.191939</td>\n",
       "      <td>-0.063299</td>\n",
       "      <td>-0.128640</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-08 16:00:00</td>\n",
       "      <td>25.08</td>\n",
       "      <td>25.38</td>\n",
       "      <td>24.75</td>\n",
       "      <td>25.35</td>\n",
       "      <td>3662224</td>\n",
       "      <td>15.113581</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.236468</td>\n",
       "      <td>-0.097933</td>\n",
       "      <td>-0.138535</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>2024-12-24 13:05:00</td>\n",
       "      <td>194.84</td>\n",
       "      <td>196.11</td>\n",
       "      <td>193.78</td>\n",
       "      <td>196.11</td>\n",
       "      <td>10403259</td>\n",
       "      <td>16.157630</td>\n",
       "      <td>70.555976</td>\n",
       "      <td>71.394452</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.929472</td>\n",
       "      <td>5.059022</td>\n",
       "      <td>0.870450</td>\n",
       "      <td>82.036536</td>\n",
       "      <td>75.642354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>2024-12-26 16:00:00</td>\n",
       "      <td>195.15</td>\n",
       "      <td>196.75</td>\n",
       "      <td>194.38</td>\n",
       "      <td>195.60</td>\n",
       "      <td>12057210</td>\n",
       "      <td>16.305173</td>\n",
       "      <td>72.222222</td>\n",
       "      <td>70.555976</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.974598</td>\n",
       "      <td>5.242137</td>\n",
       "      <td>0.732461</td>\n",
       "      <td>80.311231</td>\n",
       "      <td>79.994271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>2024-12-27 16:00:00</td>\n",
       "      <td>194.95</td>\n",
       "      <td>195.32</td>\n",
       "      <td>190.65</td>\n",
       "      <td>192.76</td>\n",
       "      <td>18891362</td>\n",
       "      <td>16.754215</td>\n",
       "      <td>67.213427</td>\n",
       "      <td>72.222222</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5.715314</td>\n",
       "      <td>5.336773</td>\n",
       "      <td>0.378541</td>\n",
       "      <td>68.815268</td>\n",
       "      <td>77.054345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>2024-12-30 16:00:00</td>\n",
       "      <td>189.80</td>\n",
       "      <td>192.55</td>\n",
       "      <td>189.12</td>\n",
       "      <td>191.24</td>\n",
       "      <td>14264659</td>\n",
       "      <td>16.473296</td>\n",
       "      <td>64.890223</td>\n",
       "      <td>67.213427</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.325786</td>\n",
       "      <td>5.334575</td>\n",
       "      <td>-0.008789</td>\n",
       "      <td>50.024546</td>\n",
       "      <td>66.383682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>2024-12-31 16:00:00</td>\n",
       "      <td>191.08</td>\n",
       "      <td>191.96</td>\n",
       "      <td>188.51</td>\n",
       "      <td>189.30</td>\n",
       "      <td>17466919</td>\n",
       "      <td>16.675819</td>\n",
       "      <td>54.545455</td>\n",
       "      <td>64.890223</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.805149</td>\n",
       "      <td>5.228690</td>\n",
       "      <td>-0.423541</td>\n",
       "      <td>26.855763</td>\n",
       "      <td>48.565193</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2516 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Date    Open    High     Low   Close    Volume     volume  \\\n",
       "0    2015-01-02 16:00:00   26.63   26.79   26.39   26.48   1327870  14.099087   \n",
       "1    2015-01-05 16:00:00   26.36   26.40   25.89   25.97   2059119  14.537789   \n",
       "2    2015-01-06 16:00:00   26.02   26.06   25.28   25.33   2731813  14.820476   \n",
       "3    2015-01-07 16:00:00   25.55   25.57   25.18   25.26   2345875  14.668169   \n",
       "4    2015-01-08 16:00:00   25.08   25.38   24.75   25.35   3662224  15.113581   \n",
       "...                  ...     ...     ...     ...     ...       ...        ...   \n",
       "2511 2024-12-24 13:05:00  194.84  196.11  193.78  196.11  10403259  16.157630   \n",
       "2512 2024-12-26 16:00:00  195.15  196.75  194.38  195.60  12057210  16.305173   \n",
       "2513 2024-12-27 16:00:00  194.95  195.32  190.65  192.76  18891362  16.754215   \n",
       "2514 2024-12-30 16:00:00  189.80  192.55  189.12  191.24  14264659  16.473296   \n",
       "2515 2024-12-31 16:00:00  191.08  191.96  188.51  189.30  17466919  16.675819   \n",
       "\n",
       "            RSI   RSI_prev    Buy   Sell  Buy_signal  Sell_signal      MACD  \\\n",
       "0           NaN        NaN  False  False           0            0  0.000000   \n",
       "1           NaN        NaN  False  False           0            0 -0.040684   \n",
       "2           NaN        NaN  False  False           0            0 -0.123149   \n",
       "3           NaN        NaN  False  False           0            0 -0.191939   \n",
       "4           NaN        NaN  False  False           0            0 -0.236468   \n",
       "...         ...        ...    ...    ...         ...          ...       ...   \n",
       "2511  70.555976  71.394452  False  False           0            0  5.929472   \n",
       "2512  72.222222  70.555976  False  False           0            0  5.974598   \n",
       "2513  67.213427  72.222222  False   True           0            1  5.715314   \n",
       "2514  64.890223  67.213427  False  False           0            0  5.325786   \n",
       "2515  54.545455  64.890223  False  False           0            0  4.805149   \n",
       "\n",
       "        Signal      Hist         %K         %D  \n",
       "0     0.000000  0.000000        NaN        NaN  \n",
       "1    -0.008137 -0.032547        NaN        NaN  \n",
       "2    -0.031139 -0.092010        NaN        NaN  \n",
       "3    -0.063299 -0.128640        NaN        NaN  \n",
       "4    -0.097933 -0.138535        NaN        NaN  \n",
       "...        ...       ...        ...        ...  \n",
       "2511  5.059022  0.870450  82.036536  75.642354  \n",
       "2512  5.242137  0.732461  80.311231  79.994271  \n",
       "2513  5.336773  0.378541  68.815268  77.054345  \n",
       "2514  5.334575 -0.008789  50.024546  66.383682  \n",
       "2515  5.228690 -0.423541  26.855763  48.565193  \n",
       "\n",
       "[2516 rows x 18 columns]"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "f3559628-8b04-41d1-b0ce-808b04a6e01c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['difference']=df['%K']-df['%D']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "1bac70b5-e82e-411c-8a6e-64308a3d8dc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0             NaN\n",
       "1             NaN\n",
       "2             NaN\n",
       "3             NaN\n",
       "4             NaN\n",
       "          ...    \n",
       "2511     6.394182\n",
       "2512     0.316960\n",
       "2513    -8.239077\n",
       "2514   -16.359136\n",
       "2515   -21.709429\n",
       "Name: difference, Length: 2516, dtype: float64"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['difference']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "02239ac3-1c8d-490e-b994-252d6618f62c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Date', ylabel='difference'>"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(data=df,x=df['Date'],y=df['difference'],color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "220f9a24-c0ed-4b96-a801-ea441638293b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['difference']=df['difference'].rolling(window=14).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "2bb10859-4950-4720-b4c4-e6ac0b57ab6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0            NaN\n",
       "1            NaN\n",
       "2            NaN\n",
       "3            NaN\n",
       "4            NaN\n",
       "          ...   \n",
       "2511    1.351703\n",
       "2512    1.296633\n",
       "2513    0.329875\n",
       "2514   -1.370700\n",
       "2515   -3.873547\n",
       "Name: difference, Length: 2516, dtype: float64"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['difference']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "c18726e7-3fa8-46cf-bcd3-b4ce80695da3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Date', ylabel='difference'>"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(data=df,x=df['Date'],y=df['difference'],color='blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "e04ae351-81c1-4ab9-be49-5e53b8a98bcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "e03a316d-c5e9-47d1-a7d5-ecdad17b7936",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "c4a3846f-2029-41ab-9daa-2c71b501d57d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py:199: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 0.0334\n",
      "Epoch 2/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0057\n",
      "Epoch 3/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0042\n",
      "Epoch 4/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0038\n",
      "Epoch 5/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0039\n",
      "Epoch 6/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0043\n",
      "Epoch 7/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0038\n",
      "Epoch 8/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 9/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 10/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0033\n",
      "Epoch 11/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0037\n",
      "Epoch 12/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 13/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 14/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0035\n",
      "Epoch 15/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0035\n",
      "Epoch 16/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0032\n",
      "Epoch 17/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0034\n",
      "Epoch 18/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0032\n",
      "Epoch 19/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0033\n",
      "Epoch 20/20\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0035\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "np.float64(0.0044906037393957375)"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM,Dense\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "feature=['RSI','MACD','Signal','%K','%D','Open','volume']\n",
    "df2=df[feature].dropna()\n",
    "scaler=MinMaxScaler()\n",
    "scaled_data=scaler.fit_transform(df2)\n",
    "def create_sequences(df2,lookback=5):\n",
    "    x,y=[],[]\n",
    "    for i in range(lookback,len(df2)):\n",
    "        x.append(df2[i-lookback:i])\n",
    "        y.append(df2[i,-1])\n",
    "    return np.array(x),np.array(y)\n",
    "lookback=5\n",
    "x, y = create_sequences(scaled_data, lookback)\n",
    "num_trained=int(len(df2)*0.8)\n",
    "x_train,x_test=x[:num_trained],df[num_trained:]\n",
    "y_train,y_test=y[:num_trained],df[num_trained:]\n",
    "model=Sequential()\n",
    "model.add(LSTM(50,return_sequences=False,input_shape=(x.shape[1], x.shape[2])))\n",
    "model.add(Dense(1))\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "mod=model.fit(x_train,y_train,epochs=20,batch_size=32)\n",
    "mod.history['loss']\n",
    "np.mean(mod.history['loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "f1a796c3-5650-4967-8ec6-a26d9c03dc89",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RSI</th>\n",
       "      <th>MACD</th>\n",
       "      <th>Signal</th>\n",
       "      <th>%K</th>\n",
       "      <th>%D</th>\n",
       "      <th>Open</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>60.740741</td>\n",
       "      <td>0.058848</td>\n",
       "      <td>-0.150068</td>\n",
       "      <td>84.191176</td>\n",
       "      <td>91.670769</td>\n",
       "      <td>27.06</td>\n",
       "      <td>14.251546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>58.711217</td>\n",
       "      <td>0.050353</td>\n",
       "      <td>-0.109984</td>\n",
       "      <td>55.514706</td>\n",
       "      <td>77.818627</td>\n",
       "      <td>26.57</td>\n",
       "      <td>14.487149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>53.947368</td>\n",
       "      <td>0.008024</td>\n",
       "      <td>-0.086382</td>\n",
       "      <td>39.338235</td>\n",
       "      <td>59.681373</td>\n",
       "      <td>26.28</td>\n",
       "      <td>14.398328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>53.436807</td>\n",
       "      <td>-0.022040</td>\n",
       "      <td>-0.073514</td>\n",
       "      <td>40.808824</td>\n",
       "      <td>45.220588</td>\n",
       "      <td>25.66</td>\n",
       "      <td>15.189443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>66.974170</td>\n",
       "      <td>0.051978</td>\n",
       "      <td>-0.048416</td>\n",
       "      <td>85.661765</td>\n",
       "      <td>55.269608</td>\n",
       "      <td>25.95</td>\n",
       "      <td>15.616469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>70.555976</td>\n",
       "      <td>5.929472</td>\n",
       "      <td>5.059022</td>\n",
       "      <td>82.036536</td>\n",
       "      <td>75.642354</td>\n",
       "      <td>194.84</td>\n",
       "      <td>16.157630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>72.222222</td>\n",
       "      <td>5.974598</td>\n",
       "      <td>5.242137</td>\n",
       "      <td>80.311231</td>\n",
       "      <td>79.994271</td>\n",
       "      <td>195.15</td>\n",
       "      <td>16.305173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>67.213427</td>\n",
       "      <td>5.715314</td>\n",
       "      <td>5.336773</td>\n",
       "      <td>68.815268</td>\n",
       "      <td>77.054345</td>\n",
       "      <td>194.95</td>\n",
       "      <td>16.754215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>64.890223</td>\n",
       "      <td>5.325786</td>\n",
       "      <td>5.334575</td>\n",
       "      <td>50.024546</td>\n",
       "      <td>66.383682</td>\n",
       "      <td>189.80</td>\n",
       "      <td>16.473296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>54.545455</td>\n",
       "      <td>4.805149</td>\n",
       "      <td>5.228690</td>\n",
       "      <td>26.855763</td>\n",
       "      <td>48.565193</td>\n",
       "      <td>191.08</td>\n",
       "      <td>16.675819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2501 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            RSI      MACD    Signal         %K         %D    Open     volume\n",
       "15    60.740741  0.058848 -0.150068  84.191176  91.670769   27.06  14.251546\n",
       "16    58.711217  0.050353 -0.109984  55.514706  77.818627   26.57  14.487149\n",
       "17    53.947368  0.008024 -0.086382  39.338235  59.681373   26.28  14.398328\n",
       "18    53.436807 -0.022040 -0.073514  40.808824  45.220588   25.66  15.189443\n",
       "19    66.974170  0.051978 -0.048416  85.661765  55.269608   25.95  15.616469\n",
       "...         ...       ...       ...        ...        ...     ...        ...\n",
       "2511  70.555976  5.929472  5.059022  82.036536  75.642354  194.84  16.157630\n",
       "2512  72.222222  5.974598  5.242137  80.311231  79.994271  195.15  16.305173\n",
       "2513  67.213427  5.715314  5.336773  68.815268  77.054345  194.95  16.754215\n",
       "2514  64.890223  5.325786  5.334575  50.024546  66.383682  189.80  16.473296\n",
       "2515  54.545455  4.805149  5.228690  26.855763  48.565193  191.08  16.675819\n",
       "\n",
       "[2501 rows x 7 columns]"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature=['RSI','MACD','Signal','%K','%D','Open','volume']\n",
    "df2=df[feature].dropna()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "784d43b5-76d9-4721-90c5-920a2751ec84",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.55729091, 0.47197386, 0.44973839, ..., 0.92517288, 0.00815898,\n",
       "        0.21639062],\n",
       "       [0.53327391, 0.4712215 , 0.45375834, ..., 0.78454767, 0.00530334,\n",
       "        0.25886226],\n",
       "       [0.47689941, 0.46747258, 0.45612529, ..., 0.60042052, 0.00361326,\n",
       "        0.24285077],\n",
       "       ...,\n",
       "       [0.63388747, 0.97294337, 1.        , ..., 0.77678877, 0.98659596,\n",
       "        0.66754273],\n",
       "       [0.60639511, 0.93844449, 0.99977963, ..., 0.66846152, 0.95658255,\n",
       "        0.61690179],\n",
       "       [0.48397705, 0.8923339 , 0.98916067, ..., 0.48757044, 0.96404219,\n",
       "        0.6534104 ]])"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler=MinMaxScaler()\n",
    "scaled_data=scaler.fit_transform(df2)\n",
    "scaled_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "498b251c-60e3-49e0-a9bd-d83f7a2957c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_sequences(df2,lookback=5):\n",
    "    x,y=[],[]\n",
    "    for i in range(lookback,len(df2)):\n",
    "        x.append(df2[i-lookback:i])\n",
    "        y.append(df2[i,-1])\n",
    "    return np.array(x),np.array(y)\n",
    "lookback=5\n",
    "x, y = create_sequences(scaled_data, lookback)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "ef3dc1c8-537e-4e59-811b-c57df0dbbafe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py:199: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 0.1155\n",
      "Epoch 2/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0064\n",
      "Epoch 3/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0043\n",
      "Epoch 4/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0043\n",
      "Epoch 5/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0044  \n",
      "Epoch 6/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0041\n",
      "Epoch 7/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0041\n",
      "Epoch 8/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0043\n",
      "Epoch 9/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0044\n",
      "Epoch 10/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0037\n",
      "Epoch 11/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0038\n",
      "Epoch 12/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0035\n",
      "Epoch 13/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036  \n",
      "Epoch 14/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0042\n",
      "Epoch 15/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 16/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0037\n",
      "Epoch 17/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 18/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0036\n",
      "Epoch 19/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0034\n",
      "Epoch 20/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.0034\n"
     ]
    }
   ],
   "source": [
    "model=Sequential()\n",
    "model.add(LSTM(50,return_sequences=False,input_shape=(x.shape[1], x.shape[2])))\n",
    "model.add(Dense(1))\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "mod=model.fit(x,y,epochs=20,batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "10f68615-11d1-47dc-a785-6e7b79cd67ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.05026129260659218,\n",
       " 0.005200820975005627,\n",
       " 0.004391724243760109,\n",
       " 0.0042022778652608395,\n",
       " 0.004203104879707098,\n",
       " 0.004149589221924543,\n",
       " 0.004087449982762337,\n",
       " 0.0040206303820014,\n",
       " 0.003986208699643612,\n",
       " 0.003841368481516838,\n",
       " 0.0039443508721888065,\n",
       " 0.003788606496527791,\n",
       " 0.0036838131491094828,\n",
       " 0.0037165021058171988,\n",
       " 0.0036655478179454803,\n",
       " 0.00367378699593246,\n",
       " 0.0036670900881290436,\n",
       " 0.003600142663344741,\n",
       " 0.003737351857125759,\n",
       " 0.0035866231191903353]"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mod.history['loss']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "548bb8b3-3747-4be3-be22-f7a142f1521f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(0.006270414125174284)"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(mod.history['loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "4f850447-2538-45d9-9d87-e990bb9c84b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import keras_tuner as kt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "93d1c95a-b2e5-4f40-be07-0b539f5ecd40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reloading Tuner from my_dir/stock_lstm/tuner0.json\n"
     ]
    }
   ],
   "source": [
    "tuner=kt.RandomSearch(\n",
    "    model,\n",
    "    objective='loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='my_dir',\n",
    "    project_name='stock_lstm')\n",
    "tuner.search(x_train,y_train,epochs=20, batch_size=32)\n",
    "best_hp = tuner.get_best_hyperparameters(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "2c9895e9-8e3b-464c-a977-c77c5586fa52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reloading Tuner from my_dir/stock_lstm/tuner0.json\n",
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py:199: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/saving/saving_lib.py:802: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 12 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0096 - val_loss: 0.0084\n",
      "Epoch 2/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0118 - val_loss: 0.0198\n",
      "Epoch 3/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0140 - val_loss: 0.0104\n",
      "Epoch 4/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0145 - val_loss: 0.0163\n",
      "Epoch 5/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0117 - val_loss: 0.0135\n",
      "Epoch 6/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0123 - val_loss: 0.0157\n",
      "Epoch 7/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0112 - val_loss: 0.0062\n",
      "Epoch 8/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0117 - val_loss: 0.0133\n",
      "Epoch 9/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0144 - val_loss: 0.0154\n",
      "Epoch 10/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0114 - val_loss: 0.0140\n",
      "Epoch 11/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0107 - val_loss: 0.0077\n",
      "Epoch 12/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0108 - val_loss: 0.0119\n",
      "Epoch 13/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0132 - val_loss: 0.0094\n",
      "Epoch 14/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0099 - val_loss: 0.0067\n",
      "Epoch 15/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0135 - val_loss: 0.0086\n",
      "Epoch 16/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0126 - val_loss: 0.0142\n",
      "Epoch 17/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0125 - val_loss: 0.0056\n",
      "Epoch 18/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0093 - val_loss: 0.0099\n",
      "Epoch 19/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0093 - val_loss: 0.0160\n",
      "Epoch 20/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0120 - val_loss: 0.0140\n",
      "Epoch 21/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0113 - val_loss: 0.0268\n",
      "Epoch 22/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0114 - val_loss: 0.0100\n",
      "Epoch 23/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0111 - val_loss: 0.0146\n",
      "Epoch 24/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0133 - val_loss: 0.0147\n",
      "Epoch 25/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0127 - val_loss: 0.0136\n",
      "Epoch 26/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0100 - val_loss: 0.0047\n",
      "Epoch 27/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0138 - val_loss: 0.0109\n",
      "Epoch 28/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0142 - val_loss: 0.0058\n",
      "Epoch 29/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0120 - val_loss: 0.0152\n",
      "Epoch 30/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0113 - val_loss: 0.0183\n",
      "[0.010012335143983364, 0.011970467865467072, 0.013619261793792248, 0.0146208256483078, 0.011676592752337456, 0.012749730609357357, 0.012287554331123829, 0.009749186225235462, 0.014244192279875278, 0.012141600251197815, 0.01102510280907154, 0.010562814772129059, 0.011851568706333637, 0.010777482762932777, 0.012697059661149979, 0.01068390067666769, 0.01194773055613041, 0.009909039363265038, 0.010352632030844688, 0.01179120410233736, 0.01266106590628624, 0.011206242255866528, 0.012363153509795666, 0.01217018160969019, 0.010243596509099007, 0.010467211715877056, 0.012468859553337097, 0.011510813608765602, 0.010549349710345268, 0.01102614589035511]\n",
      "[0.008383506909012794, 0.01978067122399807, 0.01036324817687273, 0.01632685214281082, 0.013476600870490074, 0.01567934639751911, 0.006152402609586716, 0.013264540582895279, 0.015386051498353481, 0.014028096571564674, 0.007688081357628107, 0.011896701529622078, 0.00937437079846859, 0.0067392815835773945, 0.008629207499325275, 0.014231594279408455, 0.005611340515315533, 0.009851611219346523, 0.016020717099308968, 0.01396988332271576, 0.026845039799809456, 0.009997310116887093, 0.01461084559559822, 0.014681732282042503, 0.013577738776803017, 0.004678055178374052, 0.010941059328615665, 0.005759118124842644, 0.015191623009741306, 0.01833098568022251]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "np.float64(0.012382253802691897)"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM,Dense,Dropout\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler=MinMaxScaler()\n",
    "scaled=scaler.fit_transform(df2)\n",
    "def create_sequence(df2,lookback):\n",
    "    x,y=[],[]\n",
    "    for i in range(lookback,len(df2)):\n",
    "        x.append(df2[i-lookback:i])\n",
    "        y.append(df2[i,-1])\n",
    "    return np.array(x),np.array(y)\n",
    "lookback=5\n",
    "x,y=create_sequence(scaled,lookback)\n",
    "train_size=int(len(x)*0.8)\n",
    "val_size = int(len(x) * 0.1)\n",
    "x_train,x_test=x[:train_size],x[train_size:]\n",
    "y_train,y_test=y[:train_size],y[train_size:]\n",
    "x_val, y_val = x[train_size:train_size+val_size], y[train_size:train_size+val_size]\n",
    "def model(hp):\n",
    "    model=Sequential()\n",
    "    model.add(LSTM(\n",
    "        units=hp.Int('units',min_value=50, max_value=210,step=16),\n",
    "        return_sequences=False,\n",
    "        input_shape=(x.shape[1],x.shape[2]),activation='tanh'))\n",
    "    model.add(Dense(1)),\n",
    "    model.add(Dropout(hp.Float('Dropout',0.1,0.5,step=0.1))),\n",
    "    model.compile(optimizer='Adam',loss='mse')\n",
    "    return model\n",
    "tuner=kt.RandomSearch(\n",
    "    model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='my_dir', \n",
    "    project_name='stock_lstm')\n",
    "tuner.search(x_train, y_train, epochs=20, batch_size=32)\n",
    "best_hp=tuner.get_best_hyperparameters(1)[0]\n",
    "best_model=tuner.get_best_models(num_models=1)[0]\n",
    "history = best_model.fit(\n",
    "    x_train, y_train,\n",
    "    epochs=30,\n",
    "    batch_size=32,\n",
    "    validation_data=(x_val, y_val)\n",
    ")\n",
    "\n",
    "# Now you can access history\n",
    "print(history.history['loss'])\n",
    "print(history.history['val_loss'])\n",
    "np.mean(history.history['val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "1d532c71-e194-4766-ae6d-01cffeb6689b",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler=MinMaxScaler()\n",
    "scaled=scaler.fit_transform(df2)\n",
    "train_size=int(len(x)*0.8)\n",
    "val_size = int(len(x) * 0.1)\n",
    "x_train,x_test=x[:train_size],x[train_size:]\n",
    "y_train,y_test=y[:train_size],y[train_size:]\n",
    "x_val, y_val = x[train_size:train_size+val_size], y[train_size:train_size+val_size]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "3805c291-ebb2-4f27-8d34-b943d3b50fc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_sequence(df2,lookback):\n",
    "    x,y=[],[]\n",
    "    for i in range(lookback,len(df2)):\n",
    "        x.append(df2[i-lookback:i])\n",
    "        y.append(df2[i,-1])\n",
    "    return np.array(x),np.array(y)\n",
    "lookback=5\n",
    "x,y=create_sequence(scaled,lookback)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "6d94888c-2788-415a-ac95-804608aaa84a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def model(hp):\n",
    "    model=Sequential()\n",
    "    model.add(LSTM(\n",
    "        units=hp.Int('units',min_value=50, max_value=210,step=16),\n",
    "        return_sequences=False,\n",
    "        input_shape=(x.shape[1],x.shape[2]),activation='tanh'))\n",
    "    model.add(Dense(1)),\n",
    "    model.compile(optimizer='Adam',loss='mse')\n",
    "    model.add(Dropout(hp.Float('Dropout',0.1,0.5,step=0.1)))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "c79e36d6-35a9-4c05-8182-d95759c0870c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 05s]\n",
      "loss: 0.03369109705090523\n",
      "\n",
      "Best loss So Far: 0.009922157041728497\n",
      "Total elapsed time: 04h 51m 19s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/saving/saving_lib.py:802: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 12 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    }
   ],
   "source": [
    "tuner=kt.RandomSearch(\n",
    "    model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='my_dir', \n",
    "    project_name='stock_lstm')\n",
    "tuner.search(x_train, y_train, epochs=20, batch_size=32)\n",
    "best_hp=tuner.get_best_hyperparameters(1)[0]\n",
    "best_model=tuner.get_best_models(num_models=1)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "64e0023f-5d2b-4605-a8af-97b102beef51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0109 - val_loss: 0.0077\n",
      "Epoch 2/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0124 - val_loss: 0.0122\n",
      "Epoch 3/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0113 - val_loss: 0.0095\n",
      "Epoch 4/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0104 - val_loss: 0.0106\n",
      "Epoch 5/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0120 - val_loss: 0.0105\n",
      "Epoch 6/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0092 - val_loss: 0.0111\n",
      "Epoch 7/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0124 - val_loss: 0.0068\n",
      "Epoch 8/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0111 - val_loss: 0.0126\n",
      "Epoch 9/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0084 - val_loss: 0.0068\n",
      "Epoch 10/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0112 - val_loss: 0.0122\n",
      "Epoch 11/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0128 - val_loss: 0.0084\n",
      "Epoch 12/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0118 - val_loss: 0.0102\n",
      "Epoch 13/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0129 - val_loss: 0.0052\n",
      "Epoch 14/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0110 - val_loss: 0.0078\n",
      "Epoch 15/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0109 - val_loss: 0.0112\n",
      "Epoch 16/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0097 - val_loss: 0.0080\n",
      "Epoch 17/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0103 - val_loss: 0.0059\n",
      "Epoch 18/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0113 - val_loss: 0.0099\n",
      "Epoch 19/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0101 - val_loss: 0.0084\n",
      "Epoch 20/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0106 - val_loss: 0.0074\n",
      "Epoch 21/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.0126 - val_loss: 0.0096\n",
      "Epoch 22/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0089 - val_loss: 0.0064\n",
      "Epoch 23/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0096 - val_loss: 0.0126\n",
      "Epoch 24/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0138 - val_loss: 0.0104\n",
      "Epoch 25/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0120 - val_loss: 0.0126\n",
      "Epoch 26/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0103 - val_loss: 0.0077\n",
      "Epoch 27/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0130 - val_loss: 0.0111\n",
      "Epoch 28/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0136 - val_loss: 0.0099\n",
      "Epoch 29/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0101 - val_loss: 0.0072\n",
      "Epoch 30/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0122 - val_loss: 0.0103\n",
      "[0.010211516171693802, 0.011023041792213917, 0.01248799730092287, 0.010103413835167885, 0.012202729471027851, 0.010332553647458553, 0.011254881508648396, 0.010750418528914452, 0.010199046693742275, 0.0099856061860919, 0.014847585000097752, 0.010677952319383621, 0.012349848635494709, 0.01109846867620945, 0.010792356915771961, 0.009876110590994358, 0.010345512069761753, 0.01190466433763504, 0.011238393373787403, 0.01166563481092453, 0.011394381523132324, 0.010909332893788815, 0.010230397805571556, 0.011914237402379513, 0.010753254406154156, 0.011049972847104073, 0.011716975830495358, 0.013118323870003223, 0.010287065990269184, 0.012464224360883236]\n",
      "[0.007699901703745127, 0.012188476510345936, 0.009524468332529068, 0.010597323067486286, 0.010470318607985973, 0.01107011642307043, 0.006751282140612602, 0.012588179670274258, 0.0067693754099309444, 0.012198509648442268, 0.008427408523857594, 0.010201686061918736, 0.00519493967294693, 0.007795287761837244, 0.011191221885383129, 0.008004763163626194, 0.005932570900768042, 0.00986963789910078, 0.008440835401415825, 0.00736425444483757, 0.009612752124667168, 0.00639053201302886, 0.012648426927626133, 0.010390768758952618, 0.012618652544915676, 0.007708012592047453, 0.011068043299019337, 0.009862123057246208, 0.007154910359531641, 0.010301774367690086]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "np.float64(0.009334551775828004)"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history = best_model.fit(\n",
    "    x_train, y_train,\n",
    "    epochs=30,\n",
    "    batch_size=32,\n",
    "    validation_data=(x_val, y_val)\n",
    ")\n",
    "\n",
    "# Now you can access history\n",
    "print(history.history['loss'])\n",
    "print(history.history['val_loss'])\n",
    "np.mean(history.history['val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "id": "2771be54-7aa6-414c-99d4-e7a167e926ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reloading Tuner from my_dir/stock_lstm/tuner0.json\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py:199: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.1949\n",
      "Epoch 2/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1257\n",
      "Epoch 3/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1163\n",
      "Epoch 4/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1350\n",
      "Epoch 5/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1003\n",
      "Epoch 6/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1187\n",
      "Epoch 7/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1115\n",
      "Epoch 8/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0975\n",
      "Epoch 9/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1040\n",
      "Epoch 10/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1016\n",
      "Epoch 11/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1105\n",
      "Epoch 12/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1099\n",
      "Epoch 13/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1093\n",
      "Epoch 14/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.1050\n",
      "Epoch 15/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1141\n",
      "Epoch 16/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1088\n",
      "Epoch 17/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0963\n",
      "Epoch 18/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1022\n",
      "Epoch 19/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1051\n",
      "Epoch 20/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1050\n",
      "Epoch 21/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1117\n",
      "Epoch 22/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0989\n",
      "Epoch 23/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1072\n",
      "Epoch 24/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1057\n",
      "Epoch 25/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.1222\n",
      "Epoch 26/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1139\n",
      "Epoch 27/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1053\n",
      "Epoch 28/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.0977\n",
      "Epoch 29/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1076\n",
      "Epoch 30/30\n",
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1164\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "np.float64(0.1132326419154803)"
      ]
     },
     "execution_count": 443,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential\n",
    "import numpy as np\n",
    "from tensorflow.keras.layers import Dense,GRU\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import keras_tuner as kt\n",
    "scaler=StandardScaler()\n",
    "scalerd=scaler.fit_transform(df2)\n",
    "def create_sequence(data,lookback):\n",
    "    x,y=[],[]\n",
    "    for i in range(lookback,len(data)):\n",
    "        x.append(data[i-lookback:i])\n",
    "        y.append(data[i,-1])\n",
    "    return np.array(x),np.array(y)\n",
    "lookback=5\n",
    "x,y=create_sequence(scalerd,lookback)\n",
    "train_size=int(len(x)*0.8)\n",
    "x_train,x_test=x[:train_size],x[train_size:]\n",
    "y_train,y_test=y[:train_size],y[train_size:]\n",
    "def build_model(hp):\n",
    "    model=Sequential()\n",
    "    model.add(GRU(\n",
    "    units=hp.Int('units', min_value=50, max_value=210, step=16),\n",
    "    activation='tanh',\n",
    "    return_sequences=False,\n",
    "    input_shape=(x.shape[1], x.shape[2])\n",
    "))\n",
    "    model.add(Dense(1)),\n",
    "    model.add(Dropout(hp.Float('dropout',0.1,0.5,step=0.1)))\n",
    "    model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=hp.Float('learning_rate',1e-4,1e-2,sampling='log')),\n",
    "    loss='mse')\n",
    "    return model\n",
    "tuner=kt.RandomSearch(\n",
    "    build_model,\n",
    "    objective='loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='my_dir',\n",
    "    project_name='stock_lstm')\n",
    "tuner.search(x_train,y_train,epochs=20,batch_size=32)\n",
    "best_hp=tuner.get_best_hyperparameters(1)[0]\n",
    "final_model=tuner.hypermodel.build(best_hp)\n",
    "history=final_model.fit(x_train,y_train,epochs=30,batch_size=32)\n",
    "mse=np.mean(history.history['loss'])\n",
    "mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "34afbef1-f7ed-49d3-87f1-8ed4f9c55143",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.35882968, -0.23385668, -0.38644275, ...,  1.23263117,\n",
       "         -1.28306061, -0.61497138],\n",
       "        [ 0.23102899, -0.23911305, -0.35965094, ...,  0.7217652 ,\n",
       "         -1.29429542, -0.43002753],\n",
       "        [-0.06895431, -0.26530476, -0.34387594, ...,  0.05286455,\n",
       "         -1.30094459, -0.49975   ],\n",
       "        [-0.10110475, -0.28390751, -0.33527487, ..., -0.48044813,\n",
       "         -1.31516007,  0.12126206],\n",
       "        [ 0.75135359, -0.23810767, -0.31849944, ..., -0.10984101,\n",
       "         -1.30851089,  0.45646972]],\n",
       "\n",
       "       [[ 0.23102899, -0.23911305, -0.35965094, ...,  0.7217652 ,\n",
       "         -1.29429542, -0.43002753],\n",
       "        [-0.06895431, -0.26530476, -0.34387594, ...,  0.05286455,\n",
       "         -1.30094459, -0.49975   ],\n",
       "        [-0.10110475, -0.28390751, -0.33527487, ..., -0.48044813,\n",
       "         -1.31516007,  0.12126206],\n",
       "        [ 0.75135359, -0.23810767, -0.31849944, ..., -0.10984101,\n",
       "         -1.30851089,  0.45646972],\n",
       "        [ 0.69000936, -0.21591833, -0.30028532, ...,  0.29922958,\n",
       "         -1.29108547,  0.08424251]],\n",
       "\n",
       "       [[-0.06895431, -0.26530476, -0.34387594, ...,  0.05286455,\n",
       "         -1.30094459, -0.49975   ],\n",
       "        [-0.10110475, -0.28390751, -0.33527487, ..., -0.48044813,\n",
       "         -1.31516007,  0.12126206],\n",
       "        [ 0.75135359, -0.23810767, -0.31849944, ..., -0.10984101,\n",
       "         -1.30851089,  0.45646972],\n",
       "        [ 0.69000936, -0.21591833, -0.30028532, ...,  0.29922958,\n",
       "         -1.29108547,  0.08424251],\n",
       "        [ 0.61756928, -0.19619131, -0.2814522 , ...,  0.71434326,\n",
       "         -1.29590039, -0.28551658]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[ 0.8900342 ,  3.17326148,  2.6448309 , ...,  0.37420424,\n",
       "          2.49023085,  1.76977214],\n",
       "        [ 0.90363921,  3.16455695,  2.80069536, ...,  0.1869601 ,\n",
       "          2.35610096,  2.30078618],\n",
       "        [ 1.0297022 ,  3.27753312,  2.94979424, ...,  0.37920962,\n",
       "          2.51292975,  1.59042529],\n",
       "        [ 0.97690273,  3.39866924,  3.09524354, ...,  0.64150438,\n",
       "          2.56383032,  0.88127216],\n",
       "        [ 1.08182757,  3.42659158,  3.21763531, ...,  0.80200278,\n",
       "          2.57093806,  0.99709147]],\n",
       "\n",
       "       [[ 0.90363921,  3.16455695,  2.80069536, ...,  0.1869601 ,\n",
       "          2.35610096,  2.30078618],\n",
       "        [ 1.0297022 ,  3.27753312,  2.94979424, ...,  0.37920962,\n",
       "          2.51292975,  1.59042529],\n",
       "        [ 0.97690273,  3.39866924,  3.09524354, ...,  0.64150438,\n",
       "          2.56383032,  0.88127216],\n",
       "        [ 1.08182757,  3.42659158,  3.21763531, ...,  0.80200278,\n",
       "          2.57093806,  0.99709147],\n",
       "        [ 0.76641983,  3.26615611,  3.28088832, ...,  0.69357853,\n",
       "          2.56635242,  1.34958185]],\n",
       "\n",
       "       [[ 1.0297022 ,  3.27753312,  2.94979424, ...,  0.37920962,\n",
       "          2.51292975,  1.59042529],\n",
       "        [ 0.97690273,  3.39866924,  3.09524354, ...,  0.64150438,\n",
       "          2.56383032,  0.88127216],\n",
       "        [ 1.08182757,  3.42659158,  3.21763531, ...,  0.80200278,\n",
       "          2.57093806,  0.99709147],\n",
       "        [ 0.76641983,  3.26615611,  3.28088832, ...,  0.69357853,\n",
       "          2.56635242,  1.34958185],\n",
       "        [ 0.62012585,  3.02513042,  3.27941964, ...,  0.30004523,\n",
       "          2.44827227,  1.12906461]]])"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "e5d40550-22a9-425b-93ab-f60cb1969416",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RSI</th>\n",
       "      <th>MACD</th>\n",
       "      <th>Signal</th>\n",
       "      <th>%K</th>\n",
       "      <th>%D</th>\n",
       "      <th>Open</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>60.740741</td>\n",
       "      <td>0.058848</td>\n",
       "      <td>-0.150068</td>\n",
       "      <td>84.191176</td>\n",
       "      <td>91.670769</td>\n",
       "      <td>27.06</td>\n",
       "      <td>14.251546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>58.711217</td>\n",
       "      <td>0.050353</td>\n",
       "      <td>-0.109984</td>\n",
       "      <td>55.514706</td>\n",
       "      <td>77.818627</td>\n",
       "      <td>26.57</td>\n",
       "      <td>14.487149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>53.947368</td>\n",
       "      <td>0.008024</td>\n",
       "      <td>-0.086382</td>\n",
       "      <td>39.338235</td>\n",
       "      <td>59.681373</td>\n",
       "      <td>26.28</td>\n",
       "      <td>14.398328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>53.436807</td>\n",
       "      <td>-0.022040</td>\n",
       "      <td>-0.073514</td>\n",
       "      <td>40.808824</td>\n",
       "      <td>45.220588</td>\n",
       "      <td>25.66</td>\n",
       "      <td>15.189443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>66.974170</td>\n",
       "      <td>0.051978</td>\n",
       "      <td>-0.048416</td>\n",
       "      <td>85.661765</td>\n",
       "      <td>55.269608</td>\n",
       "      <td>25.95</td>\n",
       "      <td>15.616469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>70.555976</td>\n",
       "      <td>5.929472</td>\n",
       "      <td>5.059022</td>\n",
       "      <td>82.036536</td>\n",
       "      <td>75.642354</td>\n",
       "      <td>194.84</td>\n",
       "      <td>16.157630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>72.222222</td>\n",
       "      <td>5.974598</td>\n",
       "      <td>5.242137</td>\n",
       "      <td>80.311231</td>\n",
       "      <td>79.994271</td>\n",
       "      <td>195.15</td>\n",
       "      <td>16.305173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>67.213427</td>\n",
       "      <td>5.715314</td>\n",
       "      <td>5.336773</td>\n",
       "      <td>68.815268</td>\n",
       "      <td>77.054345</td>\n",
       "      <td>194.95</td>\n",
       "      <td>16.754215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>64.890223</td>\n",
       "      <td>5.325786</td>\n",
       "      <td>5.334575</td>\n",
       "      <td>50.024546</td>\n",
       "      <td>66.383682</td>\n",
       "      <td>189.80</td>\n",
       "      <td>16.473296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>54.545455</td>\n",
       "      <td>4.805149</td>\n",
       "      <td>5.228690</td>\n",
       "      <td>26.855763</td>\n",
       "      <td>48.565193</td>\n",
       "      <td>191.08</td>\n",
       "      <td>16.675819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2501 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            RSI      MACD    Signal         %K         %D    Open     volume\n",
       "15    60.740741  0.058848 -0.150068  84.191176  91.670769   27.06  14.251546\n",
       "16    58.711217  0.050353 -0.109984  55.514706  77.818627   26.57  14.487149\n",
       "17    53.947368  0.008024 -0.086382  39.338235  59.681373   26.28  14.398328\n",
       "18    53.436807 -0.022040 -0.073514  40.808824  45.220588   25.66  15.189443\n",
       "19    66.974170  0.051978 -0.048416  85.661765  55.269608   25.95  15.616469\n",
       "...         ...       ...       ...        ...        ...     ...        ...\n",
       "2511  70.555976  5.929472  5.059022  82.036536  75.642354  194.84  16.157630\n",
       "2512  72.222222  5.974598  5.242137  80.311231  79.994271  195.15  16.305173\n",
       "2513  67.213427  5.715314  5.336773  68.815268  77.054345  194.95  16.754215\n",
       "2514  64.890223  5.325786  5.334575  50.024546  66.383682  189.80  16.473296\n",
       "2515  54.545455  4.805149  5.228690  26.855763  48.565193  191.08  16.675819\n",
       "\n",
       "[2501 rows x 7 columns]"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "27f356f2-e155-45a3-8ae3-ee2d838b9c45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 6.07407407e+01,  5.88481834e-02, -1.50068250e-01, ...,\n",
       "         9.16707687e+01,  2.70600000e+01,  1.42515463e+01],\n",
       "       [ 5.87112172e+01,  5.03532215e-02, -1.09983956e-01, ...,\n",
       "         7.78186275e+01,  2.65700000e+01,  1.44871486e+01],\n",
       "       [ 5.39473684e+01,  8.02408353e-03, -8.63823477e-02, ...,\n",
       "         5.96813725e+01,  2.62800000e+01,  1.43983282e+01],\n",
       "       ...,\n",
       "       [ 6.72134274e+01,  5.71531405e+00,  5.33677261e+00, ...,\n",
       "         7.70543452e+01,  1.94950000e+02,  1.67542154e+01],\n",
       "       [ 6.48902233e+01,  5.32578587e+00,  5.33457527e+00, ...,\n",
       "         6.63836819e+01,  1.89800000e+02,  1.64732957e+01],\n",
       "       [ 5.45454545e+01,  4.80514942e+00,  5.22869010e+00, ...,\n",
       "         4.85651925e+01,  1.91080000e+02,  1.66758194e+01]])"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "id": "9a683592-0c57-4c9b-93a3-40b16ff88b61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.35882968, -0.23385668, -0.38644275, ...,  1.23263117,\n",
       "         -1.28306061, -0.61497138],\n",
       "        [ 0.23102899, -0.23911305, -0.35965094, ...,  0.7217652 ,\n",
       "         -1.29429542, -0.43002753],\n",
       "        [-0.06895431, -0.26530476, -0.34387594, ...,  0.05286455,\n",
       "         -1.30094459, -0.49975   ],\n",
       "        [-0.10110475, -0.28390751, -0.33527487, ..., -0.48044813,\n",
       "         -1.31516007,  0.12126206],\n",
       "        [ 0.75135359, -0.23810767, -0.31849944, ..., -0.10984101,\n",
       "         -1.30851089,  0.45646972]],\n",
       "\n",
       "       [[ 0.23102899, -0.23911305, -0.35965094, ...,  0.7217652 ,\n",
       "         -1.29429542, -0.43002753],\n",
       "        [-0.06895431, -0.26530476, -0.34387594, ...,  0.05286455,\n",
       "         -1.30094459, -0.49975   ],\n",
       "        [-0.10110475, -0.28390751, -0.33527487, ..., -0.48044813,\n",
       "         -1.31516007,  0.12126206],\n",
       "        [ 0.75135359, -0.23810767, -0.31849944, ..., -0.10984101,\n",
       "         -1.30851089,  0.45646972],\n",
       "        [ 0.69000936, -0.21591833, -0.30028532, ...,  0.29922958,\n",
       "         -1.29108547,  0.08424251]],\n",
       "\n",
       "       [[-0.06895431, -0.26530476, -0.34387594, ...,  0.05286455,\n",
       "         -1.30094459, -0.49975   ],\n",
       "        [-0.10110475, -0.28390751, -0.33527487, ..., -0.48044813,\n",
       "         -1.31516007,  0.12126206],\n",
       "        [ 0.75135359, -0.23810767, -0.31849944, ..., -0.10984101,\n",
       "         -1.30851089,  0.45646972],\n",
       "        [ 0.69000936, -0.21591833, -0.30028532, ...,  0.29922958,\n",
       "         -1.29108547,  0.08424251],\n",
       "        [ 0.61756928, -0.19619131, -0.2814522 , ...,  0.71434326,\n",
       "         -1.29590039, -0.28551658]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[ 0.8900342 ,  3.17326148,  2.6448309 , ...,  0.37420424,\n",
       "          2.49023085,  1.76977214],\n",
       "        [ 0.90363921,  3.16455695,  2.80069536, ...,  0.1869601 ,\n",
       "          2.35610096,  2.30078618],\n",
       "        [ 1.0297022 ,  3.27753312,  2.94979424, ...,  0.37920962,\n",
       "          2.51292975,  1.59042529],\n",
       "        [ 0.97690273,  3.39866924,  3.09524354, ...,  0.64150438,\n",
       "          2.56383032,  0.88127216],\n",
       "        [ 1.08182757,  3.42659158,  3.21763531, ...,  0.80200278,\n",
       "          2.57093806,  0.99709147]],\n",
       "\n",
       "       [[ 0.90363921,  3.16455695,  2.80069536, ...,  0.1869601 ,\n",
       "          2.35610096,  2.30078618],\n",
       "        [ 1.0297022 ,  3.27753312,  2.94979424, ...,  0.37920962,\n",
       "          2.51292975,  1.59042529],\n",
       "        [ 0.97690273,  3.39866924,  3.09524354, ...,  0.64150438,\n",
       "          2.56383032,  0.88127216],\n",
       "        [ 1.08182757,  3.42659158,  3.21763531, ...,  0.80200278,\n",
       "          2.57093806,  0.99709147],\n",
       "        [ 0.76641983,  3.26615611,  3.28088832, ...,  0.69357853,\n",
       "          2.56635242,  1.34958185]],\n",
       "\n",
       "       [[ 1.0297022 ,  3.27753312,  2.94979424, ...,  0.37920962,\n",
       "          2.51292975,  1.59042529],\n",
       "        [ 0.97690273,  3.39866924,  3.09524354, ...,  0.64150438,\n",
       "          2.56383032,  0.88127216],\n",
       "        [ 1.08182757,  3.42659158,  3.21763531, ...,  0.80200278,\n",
       "          2.57093806,  0.99709147],\n",
       "        [ 0.76641983,  3.26615611,  3.28088832, ...,  0.69357853,\n",
       "          2.56635242,  1.34958185],\n",
       "        [ 0.62012585,  3.02513042,  3.27941964, ...,  0.30004523,\n",
       "          2.44827227,  1.12906461]]])"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "a6242829-5ff3-4444-86da-3c9aed0f8bd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "id": "5fbb7633-8753-45d1-b07f-98db31a30d08",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca=PCA(n_components=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "id": "09623c5e-b770-4c4a-9879-e22ef7896220",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 441,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "id": "293ee995-f905-4d56-9bec-ff11018e116d",
   "metadata": {},
   "outputs": [],
   "source": [
    "features=['RSI', 'MACD', 'Signal', '%K', '%D', 'Open']\n",
    "target = 'volume'\n",
    "X = df[features]\n",
    "y = df[target]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "ec80140c-8921-455a-bf23-9616353bdcfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RSI</th>\n",
       "      <th>MACD</th>\n",
       "      <th>Signal</th>\n",
       "      <th>%K</th>\n",
       "      <th>%D</th>\n",
       "      <th>Open</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>60.740741</td>\n",
       "      <td>0.058848</td>\n",
       "      <td>-0.150068</td>\n",
       "      <td>84.191176</td>\n",
       "      <td>91.670769</td>\n",
       "      <td>27.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>58.711217</td>\n",
       "      <td>0.050353</td>\n",
       "      <td>-0.109984</td>\n",
       "      <td>55.514706</td>\n",
       "      <td>77.818627</td>\n",
       "      <td>26.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>53.947368</td>\n",
       "      <td>0.008024</td>\n",
       "      <td>-0.086382</td>\n",
       "      <td>39.338235</td>\n",
       "      <td>59.681373</td>\n",
       "      <td>26.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>53.436807</td>\n",
       "      <td>-0.022040</td>\n",
       "      <td>-0.073514</td>\n",
       "      <td>40.808824</td>\n",
       "      <td>45.220588</td>\n",
       "      <td>25.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>66.974170</td>\n",
       "      <td>0.051978</td>\n",
       "      <td>-0.048416</td>\n",
       "      <td>85.661765</td>\n",
       "      <td>55.269608</td>\n",
       "      <td>25.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>70.555976</td>\n",
       "      <td>5.929472</td>\n",
       "      <td>5.059022</td>\n",
       "      <td>82.036536</td>\n",
       "      <td>75.642354</td>\n",
       "      <td>194.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>72.222222</td>\n",
       "      <td>5.974598</td>\n",
       "      <td>5.242137</td>\n",
       "      <td>80.311231</td>\n",
       "      <td>79.994271</td>\n",
       "      <td>195.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2513</th>\n",
       "      <td>67.213427</td>\n",
       "      <td>5.715314</td>\n",
       "      <td>5.336773</td>\n",
       "      <td>68.815268</td>\n",
       "      <td>77.054345</td>\n",
       "      <td>194.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2514</th>\n",
       "      <td>64.890223</td>\n",
       "      <td>5.325786</td>\n",
       "      <td>5.334575</td>\n",
       "      <td>50.024546</td>\n",
       "      <td>66.383682</td>\n",
       "      <td>189.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2515</th>\n",
       "      <td>54.545455</td>\n",
       "      <td>4.805149</td>\n",
       "      <td>5.228690</td>\n",
       "      <td>26.855763</td>\n",
       "      <td>48.565193</td>\n",
       "      <td>191.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2501 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            RSI      MACD    Signal         %K         %D    Open\n",
       "15    60.740741  0.058848 -0.150068  84.191176  91.670769   27.06\n",
       "16    58.711217  0.050353 -0.109984  55.514706  77.818627   26.57\n",
       "17    53.947368  0.008024 -0.086382  39.338235  59.681373   26.28\n",
       "18    53.436807 -0.022040 -0.073514  40.808824  45.220588   25.66\n",
       "19    66.974170  0.051978 -0.048416  85.661765  55.269608   25.95\n",
       "...         ...       ...       ...        ...        ...     ...\n",
       "2511  70.555976  5.929472  5.059022  82.036536  75.642354  194.84\n",
       "2512  72.222222  5.974598  5.242137  80.311231  79.994271  195.15\n",
       "2513  67.213427  5.715314  5.336773  68.815268  77.054345  194.95\n",
       "2514  64.890223  5.325786  5.334575  50.024546  66.383682  189.80\n",
       "2515  54.545455  4.805149  5.228690  26.855763  48.565193  191.08\n",
       "\n",
       "[2501 rows x 6 columns]"
      ]
     },
     "execution_count": 362,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1=X.dropna()\n",
    "X1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "e9dba3f7-f668-462f-a3b4-e1b420e36513",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca=PCA(n_components=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "id": "39bd84f9-7546-45fe-bda5-f2816a53c578",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_drop=pca.fit_transform(x_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "id": "76ee4a15-77da-4fb4-bb14-8711f9868052",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.77991868, -1.75534418, -0.51986263],\n",
       "       [ 0.04989714, -1.19056068, -0.82202573],\n",
       "       [-0.66186802, -0.70838742, -1.0472635 ],\n",
       "       ...,\n",
       "       [ 3.77774338,  3.84386147,  0.33219029],\n",
       "       [ 3.11750089,  4.08489787,  0.10029338],\n",
       "       [ 1.97563796,  4.58468958, -0.03844834]])"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "id": "37dd8b0f-19cd-43c2-ba6d-849ece88ae0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "id": "7a0ba97e-3403-49bc-9a69-1e13c219cf87",
   "metadata": {},
   "outputs": [],
   "source": [
    "X1\n",
    "scaler=StandardScaler()\n",
    "x_scaled=scaler.fit_transform(X1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "id": "be65b85e-59ed-4c87-8910-e50ff1898627",
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans = KMeans(n_clusters=4, random_state=42)\n",
    "clusters = kmeans.fit_predict(x_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "id": "171addb7-d4c1-435e-b5d6-7329a0b52aff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 2, ..., 3, 3, 3], dtype=int32)"
      ]
     },
     "execution_count": 393,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "id": "81cca900-9833-4479-a89d-2afd159e7f8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "id": "265ddbf3-a682-4ede-aeda-79543ea90b04",
   "metadata": {},
   "outputs": [],
   "source": [
    "encoder=OneHotEncoder(sparse_output=False)\n",
    "clusters_encoder=encoder.fit_transform(clusters.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "00bb99aa-ebf4-4052-8e72-532c34b87023",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 1.]])"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "5581e067-8efb-4241-9b97-a516414347fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2501, 3)"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_drop.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "id": "e3fc529e-117f-42b7-9946-afb795727d0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2501, 4)"
      ]
     },
     "execution_count": 423,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_encoder.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "id": "5d303ac3-8972-4b53-b6d4-cfb6e3c8d812",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_combined = np.hstack([X_drop, clusters_encoder])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "id": "65264d43-5600-430e-b7d2-7204e87df3c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.77991868, -1.75534418, -0.51986263, ...,  1.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.04989714, -1.19056068, -0.82202573, ...,  1.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [-0.66186802, -0.70838742, -1.0472635 , ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       ...,\n",
       "       [ 3.77774338,  3.84386147,  0.33219029, ...,  0.        ,\n",
       "         0.        ,  1.        ],\n",
       "       [ 3.11750089,  4.08489787,  0.10029338, ...,  0.        ,\n",
       "         0.        ,  1.        ],\n",
       "       [ 1.97563796,  4.58468958, -0.03844834, ...,  0.        ,\n",
       "         0.        ,  1.        ]])"
      ]
     },
     "execution_count": 404,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_combined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "id": "d71016d8-ef45-4283-9094-ede8350fbb7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_sequences(X,y,lookback=10):\n",
    "    X1,y2=[],[]\n",
    "    for i in range(lookback,len(X)):\n",
    "        X1.append(X[i-lookback:i])\n",
    "        y2.append(y[i])\n",
    "    return np.array(X1), np.array(y2)\n",
    "lookback = 10\n",
    "X1, y2 = create_sequences(X_combined,y,lookback)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 413,
   "id": "da3804c1-45ad-46ea-aff4-b4a447f6da2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py:199: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(LSTM(50, activation='relu', input_shape=(X1.shape[1], X1.shape[2])))\n",
    "model.add(Dense(1))  # predicting one target (ClosePriceNextDay)\n",
    "model.compile(optimizer='adam', loss='mse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "id": "08f1d6c8-e6d9-484a-8a34-b19d1161851c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 163.7683\n",
      "Epoch 2/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 9.1680 \n",
      "Epoch 3/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 2.0447\n",
      "Epoch 4/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.3821\n",
      "Epoch 5/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.2031\n",
      "Epoch 6/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0929\n",
      "Epoch 7/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0398\n",
      "Epoch 8/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0317\n",
      "Epoch 9/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0357\n",
      "Epoch 10/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9984\n",
      "Epoch 11/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9459\n",
      "Epoch 12/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9825\n",
      "Epoch 13/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0243\n",
      "Epoch 14/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9168\n",
      "Epoch 15/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9882\n",
      "Epoch 16/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0310\n",
      "Epoch 17/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9957\n",
      "Epoch 18/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9248\n",
      "Epoch 19/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.9299\n",
      "Epoch 20/20\n",
      "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.0253\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x1751aefa0>"
      ]
     },
     "execution_count": 415,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X1,y2,epochs=20,batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "id": "37d260d6-4c07-42d6-8e79-6e8d9f3bb47e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.77991868, -1.75534418, -0.51986263],\n",
       "       [ 0.04989714, -1.19056068, -0.82202573],\n",
       "       [-0.66186802, -0.70838742, -1.0472635 ],\n",
       "       ...,\n",
       "       [ 3.77774338,  3.84386147,  0.33219029],\n",
       "       [ 3.11750089,  4.08489787,  0.10029338],\n",
       "       [ 1.97563796,  4.58468958, -0.03844834]])"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "id": "af0d4304-1101-41b7-a463-af66934b915a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "kmeans = KMeans(n_clusters=3, random_state=42)  # e.g., 3 regimes\n",
    "cluster_labels = kmeans.fit_predict(X_drop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "id": "55b20a93-8328-4a32-bd33-94b56c5b1142",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2501,)"
      ]
     },
     "execution_count": 432,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_labels.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "441638b8-ae86-4d2a-806e-a820acfd4e43",
   "metadata": {},
   "outputs": [
    {
     "ename": "DTypePromotionError",
     "evalue": "The DType <class 'numpy.dtypes.DateTime64DType'> could not be promoted by <class 'numpy.dtypes.Float64DType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.DateTime64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Int64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.BoolDType'>, <class 'numpy.dtypes.BoolDType'>, <class 'numpy.dtypes.Int64DType'>, <class 'numpy.dtypes.Int64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mDTypePromotionError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[436], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m scaler \u001b[38;5;241m=\u001b[39m StandardScaler()\n\u001b[0;32m----> 2\u001b[0m X_scaled \u001b[38;5;241m=\u001b[39m \u001b[43mscaler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdropna\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m   \u001b[38;5;66;03m# drop NaNs first\u001b[39;00m\n\u001b[1;32m      3\u001b[0m pca \u001b[38;5;241m=\u001b[39m PCA(n_components\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m)\n\u001b[1;32m      4\u001b[0m X_pca \u001b[38;5;241m=\u001b[39m pca\u001b[38;5;241m.\u001b[39mfit_transform(X_scaled)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/utils/_set_output.py:319\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[0;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[1;32m    317\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[1;32m    318\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m--> 319\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    320\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    321\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[1;32m    322\u001b[0m         return_tuple \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    323\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[1;32m    324\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[1;32m    325\u001b[0m         )\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/base.py:918\u001b[0m, in \u001b[0;36mTransformerMixin.fit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    903\u001b[0m         warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    904\u001b[0m             (\n\u001b[1;32m    905\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis object (\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) has a `transform`\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    913\u001b[0m             \u001b[38;5;167;01mUserWarning\u001b[39;00m,\n\u001b[1;32m    914\u001b[0m         )\n\u001b[1;32m    916\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    917\u001b[0m     \u001b[38;5;66;03m# fit method of arity 1 (unsupervised transformation)\u001b[39;00m\n\u001b[0;32m--> 918\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_params\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mtransform(X)\n\u001b[1;32m    919\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    920\u001b[0m     \u001b[38;5;66;03m# fit method of arity 2 (supervised transformation)\u001b[39;00m\n\u001b[1;32m    921\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/preprocessing/_data.py:894\u001b[0m, in \u001b[0;36mStandardScaler.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    892\u001b[0m \u001b[38;5;66;03m# Reset internal state before fitting\u001b[39;00m\n\u001b[1;32m    893\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reset()\n\u001b[0;32m--> 894\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpartial_fit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/base.py:1389\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1382\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[1;32m   1384\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[1;32m   1385\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[1;32m   1386\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[1;32m   1387\u001b[0m     )\n\u001b[1;32m   1388\u001b[0m ):\n\u001b[0;32m-> 1389\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfit_method\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/preprocessing/_data.py:930\u001b[0m, in \u001b[0;36mStandardScaler.partial_fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    898\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Online computation of mean and std on X for later scaling.\u001b[39;00m\n\u001b[1;32m    899\u001b[0m \n\u001b[1;32m    900\u001b[0m \u001b[38;5;124;03mAll of X is processed as a single batch. This is intended for cases\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    927\u001b[0m \u001b[38;5;124;03m    Fitted scaler.\u001b[39;00m\n\u001b[1;32m    928\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    929\u001b[0m first_call \u001b[38;5;241m=\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_samples_seen_\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 930\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mvalidate_data\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    931\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    932\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    933\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsc\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    934\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFLOAT_DTYPES\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    935\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    936\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfirst_call\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    937\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    938\u001b[0m n_features \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m    940\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sample_weight \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/utils/validation.py:2944\u001b[0m, in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2942\u001b[0m         out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m   2943\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m no_val_y:\n\u001b[0;32m-> 2944\u001b[0m     out \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mX\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2945\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_y:\n\u001b[1;32m   2946\u001b[0m     out \u001b[38;5;241m=\u001b[39m _check_y(y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_params)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/sklearn/utils/validation.py:931\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_non_negative, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    927\u001b[0m pandas_requires_conversion \u001b[38;5;241m=\u001b[39m \u001b[38;5;28many\u001b[39m(\n\u001b[1;32m    928\u001b[0m     _pandas_dtype_needs_early_conversion(i) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m dtypes_orig\n\u001b[1;32m    929\u001b[0m )\n\u001b[1;32m    930\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mall\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(dtype_iter, np\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;28;01mfor\u001b[39;00m dtype_iter \u001b[38;5;129;01min\u001b[39;00m dtypes_orig):\n\u001b[0;32m--> 931\u001b[0m     dtype_orig \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mresult_type\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mdtypes_orig\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    932\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m pandas_requires_conversion \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(d \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m d \u001b[38;5;129;01min\u001b[39;00m dtypes_orig):\n\u001b[1;32m    933\u001b[0m     \u001b[38;5;66;03m# Force object if any of the dtypes is an object\u001b[39;00m\n\u001b[1;32m    934\u001b[0m     dtype_orig \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mobject\u001b[39m\n",
      "\u001b[0;31mDTypePromotionError\u001b[0m: The DType <class 'numpy.dtypes.DateTime64DType'> could not be promoted by <class 'numpy.dtypes.Float64DType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.DateTime64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Int64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.BoolDType'>, <class 'numpy.dtypes.BoolDType'>, <class 'numpy.dtypes.Int64DType'>, <class 'numpy.dtypes.Int64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>, <class 'numpy.dtypes.Float64DType'>)"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(df.dropna())   # drop NaNs first\n",
    "pca = PCA(n_components=3)\n",
    "X_pca = pca.fit_transform(X_scaled)\n",
    "kmeans = KMeans(n_clusters=4, random_state=42)\n",
    "cluster_labels = kmeans.fit_predict(X_scaled)\n",
    "clean_df = df.dropna().copy()\n",
    "clean_df['Clusters'] = cluster_labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "de5a8e96-348f-4037-ac26-5ca35f5e3fdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def countSignals(frequencies,filterRanges):\n",
    "    frequency_number=frequencies\n",
    "    for i in range(frequencies):\n",
    "        frequency=input('enter the number')\n",
    "    filter_num=int(input('filter size'))\n",
    "    filter_para=int(input('filter_para'))\n",
    "    for j in range(filter_num):\n",
    "        filterRanges=int(input('enter filter_para numbers per row'))\n",
    "    \n",
    "    \n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "a68f684e-e499-40fd-8ee9-de77086cd447",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the number of numbers you want to input 3\n",
      "enter frequency_count of numbers you want to input 2\n",
      "enter the number of filters da s d\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: 'da s d'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[184], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m frequency_num\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mint\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124menter the number of numbers you want to input\u001b[39m\u001b[38;5;124m'\u001b[39m))\n\u001b[1;32m      8\u001b[0m frequencies\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mmap\u001b[39m(\u001b[38;5;28mint\u001b[39m,\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124menter frequency_count of numbers you want to input\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39msplit()))\n\u001b[0;32m----> 9\u001b[0m filter_num\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43menter the number of filters\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     10\u001b[0m filter_para\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mint\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124menter the number of parameters in each filter\u001b[39m\u001b[38;5;124m'\u001b[39m))\n\u001b[1;32m     11\u001b[0m filterRanges\u001b[38;5;241m=\u001b[39m[]\n",
      "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'da s d'"
     ]
    }
   ],
   "source": [
    "def countSignals(frequencies,filterRanges):\n",
    "    count=0\n",
    "    for filters in frequencies:\n",
    "        if all(rng[0]<=filters<=rng[1] for rng in filterRanges):\n",
    "                count=count+1\n",
    "    return count\n",
    "frequency_num=int(input('enter the number of numbers you want to input'))\n",
    "frequencies=list(map(int,input('enter frequency_count of numbers you want to input').split()))\n",
    "filter_num=int(input('enter the number of filters'))\n",
    "filter_para=int(input('enter the number of parameters in each filter'))\n",
    "filterRanges=[]\n",
    "for i in range (filter_num):\n",
    "    param=list(map(int,input(f'enter {filter_para} number of filter parameters for {i+1}th time').split()))\n",
    "    filterRanges.append(param)\n",
    "countSignals(frequencies,filterRanges)\n",
    "    \n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1fed59b5-4258-48c8-a016-97f3f9222af6",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2530419393.py, line 8)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[3], line 8\u001b[0;36m\u001b[0m\n\u001b[0;31m    for i in range (len(quantity):\u001b[0m\n\u001b[0m                                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "number=int(input('enter the number of types of items'))\n",
    "quantity=list(map(int,input(f'enter {number} types of items').split()))\n",
    "def getMinimumOperations(quantity):\n",
    "    count=0\n",
    "    total=sum(quantity[0:len(quantity)])\n",
    "    left=0\n",
    "    diff=total\n",
    "    for i in range (len(quantity):\n",
    "        if abs(2*left-total)<=diff:\n",
    "            left=left+quantity[i]\n",
    "            count=count+1\n",
    "            diff=abs(2*left-total)\n",
    "        else:\n",
    "            break\n",
    "    return diff\n",
    "getMinimumOperations(quantity)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "2d83e7d5-ccc6-4dc6-86f7-7ce8796e2ae0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Bob'"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def gameWinner(color:str):\n",
    "    wendy_move=0\n",
    "    bob_move=0\n",
    "    padded='.'+color+'.'\n",
    "    for i in range(1,len(padded)-1):\n",
    "        if padded[i]=='w' and padded[i-1]=='w' and padded[i+1]=='w':\n",
    "            wendy_move+=1\n",
    "        if padded[i]=='b' and padded[i+1]=='b' and padded[i-1]=='b':\n",
    "            bob_move+=1\n",
    "    if wendy_move>bob_move:\n",
    "        return 'Wendy'\n",
    "    else:\n",
    "        return 'Bob'\n",
    "gameWinner('wwwbbbbwww')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "001bb8a0-8dd5-47e0-a30f-1f5a36fdb7ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 0]\n"
     ]
    }
   ],
   "source": [
    "def isPower(arr: list[int]):\n",
    "    result = []\n",
    "    for i in arr:\n",
    "        if i <= 0:\n",
    "            result.append(0)\n",
    "        else:\n",
    "            temp = i\n",
    "            while temp % 2 == 0:\n",
    "                temp //= 2\n",
    "            if temp == 1:\n",
    "                result.append(1)\n",
    "            else:\n",
    "                result.append(0)\n",
    "    return result\n",
    "\n",
    "print(isPower([1, 4, 6]))  # Output: [1, 1, 0]\n",
    "\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ee5c00e8-7207-44a3-97de-65cca171901b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 4\n",
      "4 6\n"
     ]
    }
   ],
   "source": [
    "def closestNumber(arry: list[int]):\n",
    "    best = float('inf')\n",
    "    pairs = []   # list of tuples\n",
    "\n",
    "    for i in range(len(arry)):\n",
    "        for j in range(i+1, len(arry)):\n",
    "            diff = abs(arry[i] - arry[j])\n",
    "            if diff < best:\n",
    "                best = diff\n",
    "                pairs = [(arry[i], arry[j])]   # reset with tuple inside list\n",
    "            elif diff == best:\n",
    "                pairs.append((arry[i], arry[j]))  # add another tuple\n",
    "\n",
    "    # sort each pair (ascending inside tuple)\n",
    "    pairs = [tuple(sorted(p)) for p in pairs]\n",
    "    # sort all pairs lexicographically\n",
    "    pairs.sort()\n",
    "\n",
    "    for a, b in pairs:\n",
    "        print(a, b)\n",
    "\n",
    "            \n",
    "\n",
    "closestNumber([6,2,4,10])\n",
    "                \n",
    "                \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8c8b6b61-6957-4076-a3ea-3491ca3e4d9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def maxIndex(steps,badElement):\n",
    "    total=0\n",
    "    for i in range(1,steps+1):\n",
    "        total=total+i\n",
    "        if total==badElement:\n",
    "            total=total-i\n",
    "    return total\n",
    "maxIndex(5,6)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ab8a8762-3033-46e7-a933-063cf37d0caa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Almost_equivalent'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def almost_equivalent(array1,array2:list[str]):\n",
    "    for i in range(len(array1)):\n",
    "        if len(array1[i])==len(array2[i]):\n",
    "            count1={}\n",
    "            count2={}\n",
    "            for letter in array1[i]:\n",
    "                if letter in count1:\n",
    "                    count1[letter]=count1[letter]+1\n",
    "                else:\n",
    "                    count1[letter]=1\n",
    "            for letter in array2[i]:\n",
    "                if letter in count2:\n",
    "                    count2[letter]=count2[letter]+1\n",
    "                else:\n",
    "                    count2[letter]=1\n",
    "            for letter in set(count1.keys()).union(count2.keys()):\n",
    "                diff=abs(count1.get(letter,0)-count2.get(letter,0))\n",
    "                if diff>3:\n",
    "                    return 'Not'\n",
    "      \n",
    "            return 'Almost_equivalent'\n",
    "        else:\n",
    "            return 'Almost_equivalent'\n",
    "almost_equivalent(['aabaab'],['bbabbc'])\n",
    "               \n",
    "                    \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f6c8d9cf-fb15-4f69-adb4-2de208dfbf74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def minimum(x:int):\n",
    "    count1=x//9\n",
    "    count2=(x%9)//3\n",
    "    count3=x%9%3\n",
    "    count=count1+count2+count3\n",
    "    return count\n",
    "minimum(80)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "08b0ca08-0f47-4132-b11d-4e9570542358",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def minimum(x: int) -> int:\n",
    "    num = x\n",
    "    count = 0\n",
    "    \n",
    "    # Count 9's\n",
    "    if num >= 9:\n",
    "        count += num // 9\n",
    "        num = num % 9\n",
    "    \n",
    "    # Count 3's\n",
    "    if num >= 3:\n",
    "        count += num // 3\n",
    "        num = num % 3\n",
    "    \n",
    "    # Count remaining 1's\n",
    "    count += num\n",
    "    \n",
    "    return count\n",
    "minimum(80)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "30553a8a-57e0-47fb-92f3-479eb20563aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def palindrome(x):\n",
    "    count=0\n",
    "    while str(x)!=str(x)[::-1]:\n",
    "        list_x=list(int(i) for i in str(x))\n",
    "        x_inverse=list_x[::-1]\n",
    "        inverse_x=int(''.join(map(str,x_inverse)))\n",
    "        x=x+inverse_x\n",
    "        count+=1\n",
    "    return count\n",
    "palindrome(13)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e42a4ae0-297f-4538-84b5-cef2c25a8782",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 2, 1]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=123\n",
    "list_x=list(int(i) for i in str(x))\n",
    "x_inverse=list_x[::-1]\n",
    "inverse_x=int('',join(map(str,x_inverse)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ea0222a8-2b01-4547-a136-e5f9967860b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 3, 2, 1]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_x+x_inverse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ad0d1499-6bd1-4fb8-b00a-acde502ae1df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "215361"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def number(num:int):\n",
    "    num_list=list(int(i) for i in str(num))\n",
    "    dic={}\n",
    "    for letter in num_list:\n",
    "        if letter in dic:\n",
    "            dic[letter]+=1\n",
    "        else:\n",
    "            dic[letter]=1\n",
    "    result=''\n",
    "    for k,v in dic.items():\n",
    "        result=result+''.join(str(k)+str(v))\n",
    "    return int(result)\n",
    "number(25556)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "36bc9ec8-ddb8-4f4d-bf50-a12f79b7167e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'num' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[67], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m number_list\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mint\u001b[39m(i) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mstr\u001b[39m(\u001b[43mnum\u001b[49m))\n",
      "\u001b[0;31mNameError\u001b[0m: name 'num' is not defined"
     ]
    }
   ],
   "source": [
    "number_list=list(int(i) for i in str(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "1b0e6cfb-65fd-409a-b800-bbcee8dc4983",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def min_amount(coins,amount):\n",
    "    dp=[float('inf')]*(amount+1)\n",
    "    dp[0]=0\n",
    "    for i in range(1,amount+1):\n",
    "        for coin in coins:\n",
    "            if i-coin>=0:\n",
    "                dp[i]=min(dp[i],dp[i-coin]+1)\n",
    "    return dp[amount] if dp[amount]!=float('inf') else -1\n",
    "min_amount([1,3,5],11)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "5f25b4db-40de-489d-8fe7-c9508b7029df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def median(a,b):\n",
    "    c=a+b\n",
    "    c1=sorted(c)\n",
    "    low=0\n",
    "    high=len(c1)-1\n",
    "    if (low+high)%2==0:\n",
    "        mid=int((low+high)/2)\n",
    "        median=c1[mid]\n",
    "    else:\n",
    "        mid=(low+high)//2\n",
    "        median=(c1[mid]+c2[mid+1])/2\n",
    "    return median\n",
    "median([1,2,3],[4,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "0b5226ee-963d-4348-90f5-3bb33aa71b8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 10)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def pair_sum(arr,target):\n",
    "    for i in arr:\n",
    "        for j in arr:\n",
    "            a=i+j\n",
    "            if a==target:\n",
    "                return i,j\n",
    "            else:\n",
    "                -1\n",
    "    return i,j\n",
    "pair_sum([11, 15, 6, 8, 9, 10],16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e60d9e89-57b4-42c4-94a0-303f53ccdd91",
   "metadata": {},
   "outputs": [],
   "source": [
    "def K_largest(arr,k):\n",
    "    arry1=sorted(arr)\n",
    "    result=arry1[k]\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "8eee6f8f-6848-4393-b8ef-333013ebf5d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-1, -1, -1, 1, 2, 3]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def k_lartes(arr,k):\n",
    "    arr1=[]\n",
    "    TopK=[]\n",
    "    for i in range(len(arr)):\n",
    "        TopK.append(arr[i])\n",
    "        TopK.sort()\n",
    "        if len(TopK)<k:\n",
    "            arr1.append(-1)\n",
    "        else:\n",
    "            arr1.append(TopK[i-k+1])\n",
    "    return arr1\n",
    "k_lartes([1, 2, 3, 4, 5, 6],4)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "7d1aef0c-9ec9-4dca-a8fe-e00c07316f06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 4]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def kfrequent(array,k):\n",
    "    dic={}\n",
    "    a=sorted(array)\n",
    "    for number in a:\n",
    "        if number in dic:\n",
    "            dic[number]+=1\n",
    "        else:\n",
    "            dic[number]=1\n",
    "    keys=list(dic.items())\n",
    "    keys.sort(\n",
    "    return keys\n",
    "kfrequent([1,1,2,3,4,4,5,6],2)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "aed5d682-2ebb-466d-a209-3992f089c5a1",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Counter' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[87], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[38;5;28mlist\u001b[39m\u001b[38;5;241m.\u001b[39mappend(freq[i][\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m\n\u001b[0;32m----> 9\u001b[0m \u001b[43mkfrequent\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m4\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m4\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m6\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[87], line 2\u001b[0m, in \u001b[0;36mkfrequent\u001b[0;34m(array, k)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mkfrequent\u001b[39m(array,k):\n\u001b[0;32m----> 2\u001b[0m     mp\u001b[38;5;241m=\u001b[39m\u001b[43mCounter\u001b[49m(array)\n\u001b[1;32m      3\u001b[0m     freq\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlist\u001b[39m(mp\u001b[38;5;241m.\u001b[39mitems())\n\u001b[1;32m      4\u001b[0m     freq\u001b[38;5;241m.\u001b[39msort(key\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x:(x[\u001b[38;5;241m1\u001b[39m],x[\u001b[38;5;241m0\u001b[39m]),reverse\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'Counter' is not defined"
     ]
    }
   ],
   "source": [
    "def kfrequent(array,k):\n",
    "    mp=Counter(array)\n",
    "    freq=list(mp.items())\n",
    "    freq.sort(key=lambda x:(x[1],x[0]),reverse=False)\n",
    "    list=[]\n",
    "    for i in range(k):\n",
    "        list.append(freq[i][0])\n",
    "    return list\n",
    "kfrequent([1,1,4,4,3,5,6,3],2)\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2317dfc3-a110-49d8-aa21-640d3c971d02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[6, 2, 3]]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def threesum(arr,target):\n",
    "    list=[]\n",
    "    n=len(arr)\n",
    "    for i in range (n):\n",
    "        for k in range(i+1,n) :\n",
    "            for j in range(k+1,n):\n",
    "                if arr[i]+arr[k]+arr[j]==target:\n",
    "                    list.append([arr[i],arr[k],arr[j]])\n",
    "                    list.sort()\n",
    "    return list\n",
    "threesum([6,2,3,5],11)\n",
    "                \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "5719f7fd-1461-4a4f-ba23-8c4fd0650ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def foursum(arr,target):\n",
    "    list=[]\n",
    "    n=len(arr)\n",
    "    for i in range(n):\n",
    "        for j in range(i+1,n):\n",
    "            for k in range(j+1,n):\n",
    "                for p in range(k+1,n):\n",
    "                    if arr[i]+arr[j]+arr[k]+arr[p]==target:\n",
    "                        four_sum=[arr[i],arr[j],arr[k],arr[p]]\n",
    "                        four_sum.sort()\n",
    "                    if four_sum not in list:\n",
    "                        list.append(four_sum)\n",
    "    return list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "d11ae09e-c262-47ac-8ff3-52f0bf4436cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def foursum(arr,target):\n",
    "    list=[]\n",
    "    n=len(arr)\n",
    "    min_diff=float('inf')\n",
    "    result=[]\n",
    "    for i in range(n):\n",
    "        for j in range(i+1,n):\n",
    "            for k in range(j+1,n):\n",
    "                for p in range(k+1,n):\n",
    "                    if arr[i]+arr[j]+arr[k]+arr[p]<=target:\n",
    "                       sum=arr[i]+arr[j]+arr[k]+arr[p]\n",
    "                       diff=abs(sum-min_diff)\n",
    "                    if diff<min_diff:\n",
    "                       min_diff=diff\n",
    "                       result=[arr[i],arr[j],arr[k],arr[p]]\n",
    "    return result\n",
    "                        \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "adc4b5b2-823b-4828-99cf-bde97dc3fcc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 1, 1, 1, 0, 0]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def surpasser(arr):\n",
    "    n=len(arr)\n",
    "    dic={}\n",
    "    res=[0]*n\n",
    "    for i in range(n):\n",
    "        count=0\n",
    "        for j in range(i+1,n):\n",
    "            if arr[j]>arr[i]:\n",
    "                count+=1\n",
    "                dic[arr[i]]=count\n",
    "        res[i]=count\n",
    "    return res\n",
    "surpasser([2, 7, 5, 3, 8, 1])\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "f6716bbd-bff7-459d-bd95-197f309ce9d5",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list assignment index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[110], line 12\u001b[0m\n\u001b[1;32m     10\u001b[0m         lst[i]\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(lst)\n\u001b[1;32m     11\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lst\n\u001b[0;32m---> 12\u001b[0m \u001b[43msurpasser\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m7\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[110], line 10\u001b[0m, in \u001b[0;36msurpasser\u001b[0;34m(arr)\u001b[0m\n\u001b[1;32m      8\u001b[0m             lst\u001b[38;5;241m.\u001b[39mappend(arr[j])\n\u001b[1;32m      9\u001b[0m             dic[arr[i]]\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(lst)\n\u001b[0;32m---> 10\u001b[0m     \u001b[43mlst\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(lst)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m lst\n",
      "\u001b[0;31mIndexError\u001b[0m: list assignment index out of range"
     ]
    }
   ],
   "source": [
    "def surpasser(arr):\n",
    "    n=len(arr)\n",
    "    dic={}\n",
    "    for i in range(n):\n",
    "        lst=[]\n",
    "        for j in range(i+1,n):\n",
    "            if arr[j]>arr[i]:\n",
    "                lst.append(arr[j])\n",
    "                dic[arr[i]]=len(lst)\n",
    "        lst[i]=len(lst)\n",
    "    return lst\n",
    "surpasser([2, 7, 5, 3, 8, 1])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "a6c2538c-7fe5-461c-9581-dc726ee4b392",
   "metadata": {},
   "outputs": [],
   "source": [
    "def partition(arr):\n",
    "    arr.sort()\n",
    "    count=0\n",
    "    for i in range(arr):\n",
    "        arr[i]+1!=arr[i+1]\n",
    "        count+=1\n",
    "    return count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "9730f83d-2b04-4eaa-a5b3-c748254858bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def minimum(array):\n",
    "    sort=sorted(array)\n",
    "    count=0\n",
    "    for i in range(len(array)):\n",
    "        if array[i]!=sort[i]:\n",
    "            count+=1\n",
    "    if count>3:\n",
    "        return 'not possible'\n",
    "    else:\n",
    "        return count-1\n",
    "minimum([1, 2, 3, 5, 4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "5d9326f6-29e2-40aa-b047-f4fde1d5e63c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def canEqual(arr):\n",
    "    s=set(arr)\n",
    "    if len(s)==1 and len(s)==2:\n",
    "        return true\n",
    "    if len(s)==3:\n",
    "        unique=sorted(s)\n",
    "        uq1=unique[0]\n",
    "        uq2=unique[1]\n",
    "        uq3=unique[2]\n",
    "        if ab(uq1-uq2)==ab(uq2-uq2):\n",
    "            return true\n",
    "    else:\n",
    "        return false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "66f8eece-42a2-4414-ad3c-ec483f6eb001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def trapping(arr):\n",
    "    total=0\n",
    "    for i in range(1,len(arr)-1):\n",
    "        left_max=arr[i]\n",
    "        for j in range(i):\n",
    "            left_max=max(left_max,arr[j])\n",
    "        right_max=arr[i]\n",
    "        for j in range(i+1,len(arr)):\n",
    "            right_max=max(right_max,arr[j])\n",
    "        total+=min(left_max,right_max)-arr[i]\n",
    "    return total\n",
    "trapping([3, 0, 1, 0, 4, 0, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "4cc50a13-ec0d-482b-9089-021abe6465e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "def maxWater(arr):\n",
    "    res = 0\n",
    "\n",
    "    # For every element of the array\n",
    "    for i in range(1, len(arr) - 1):\n",
    "\n",
    "        # Find the maximum element on its left\n",
    "        left = arr[i]\n",
    "        for j in range(i):\n",
    "            left = max(left, arr[j])\n",
    "\n",
    "        # Find the maximum element on its right\n",
    "        right = arr[i]\n",
    "        for j in range(i + 1, len(arr)):\n",
    "            right = max(right, arr[j])\n",
    "\n",
    "        # Update the maximum water\n",
    "        res += (min(left, right) - arr[i])\n",
    "\n",
    "    return res\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    arr = [2, 1, 5, 3, 1, 0, 4]\n",
    "    print(maxWater(arr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "e2934bae-ada5-4e6e-b3ca-a6a98f6923d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def quadruple(arr,target):\n",
    "    n=len(arr)\n",
    "    for i in range(n-3):\n",
    "        for j in range(i+1,n-2):\n",
    "            for k in range(j+1,n-1):\n",
    "                for p in range(k+1,n):\n",
    "                    if arr[i]+arr[j]+arr[k]+arr[p]==target:\n",
    "                        return True\n",
    "                \n",
    "    return False\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "c24498c2-5fc5-4081-8b26-d70c66f2aa36",
   "metadata": {},
   "outputs": [],
   "source": [
    "def quadruple(arr,target):\n",
    "    n=len(arr)\n",
    "    for i in range(n-3):\n",
    "        for j in range(i+1,n-2):\n",
    "            l,r=j+1,n-1\n",
    "            while l<r:\n",
    "                total=arr[i]+arr[j]+arr[l]+arr[r]\n",
    "                if total==target:\n",
    "                    return true\n",
    "                elif total<target:\n",
    "                    l=l+1\n",
    "                else:\n",
    "                    r=r-1\n",
    "    return false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "d671101e-2153-4205-959a-6bb6117fc0c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[30, 20, 10]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def minmax(arr):\n",
    "    n=len(arr)\n",
    "    res=[0]*n\n",
    "    for i in range(1,n+1):\n",
    "        minmax=float('-inf')\n",
    "        for j in range(n-i+1):\n",
    "            min_all=float('inf')\n",
    "            for k in range(j,j+i):\n",
    "                min_all=min(min_all,arr[k])\n",
    "            minmax=max(minmax,min_all)\n",
    "        res[i-1]=min_all\n",
    "    return res\n",
    "minmax([10, 20, 30])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "3bcfff4f-3a13-4355-82be-e3060dacb18e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70 30 20 10 10 10 10\n"
     ]
    }
   ],
   "source": [
    "def maxOfMin(arr):\n",
    "    n = len(arr)\n",
    "    res = [0] * n\n",
    "    \n",
    "    # For each window size k\n",
    "    for k in range(1, n + 1):\n",
    "        maxMin = float('-inf')\n",
    "        \n",
    "        # Slide window of size k\n",
    "        for i in range(n - k + 1):\n",
    "            minval = float('inf') \n",
    "            \n",
    "            # Find minimum in current window\n",
    "            for j in range(i, i + k):\n",
    "                minval = min(minval, arr[j])\n",
    "            maxMin = max(maxMin, minval)\n",
    "            \n",
    "        # Store result for window size k\n",
    "        res[k - 1] = maxMin \n",
    "    return res\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    arr = [10, 20, 30, 50, 10, 70, 30]\n",
    "    n = len(arr)\n",
    "    \n",
    "    res = maxOfMin(arr)\n",
    "    \n",
    "    print(\" \".join(map(str, res)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "7654888a-39b9-4202-b9c5-130bc5d8b59a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "def longestKSubstr(s, k):\n",
    "    \n",
    "    ans = -1  \n",
    "    \n",
    "    # set to track unique characters in current substring\n",
    "    st = set()  \n",
    "\n",
    "    for i in range(len(s)):\n",
    "        \n",
    "        # reset the set for a new starting index - 'i'\n",
    "        st.clear()  \n",
    "\n",
    "        # expand the substring from index i to j\n",
    "        for j in range(i, len(s)):\n",
    "            st.add(s[j])  \n",
    "\n",
    "            # number of unique characters becomes exactly k,\n",
    "            if len(st) == k:\n",
    "                ans = max(ans, j - i + 1)\n",
    "                \n",
    "            if(len(st) > k):\n",
    "                break\n",
    "\n",
    "    return ans\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    s = \"aabacbebebe\"\n",
    "    k = 3\n",
    "\n",
    "    print(longestKSubstr(s, k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "81bd668d-1df7-4216-bac3-b9b268bbe1f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def substring(arr1,arr2):\n",
    "    n1=len(arr1)\n",
    "    n2=len(arr2)\n",
    "    start=-1\n",
    "    min_len=float('inf')\n",
    "    i=0\n",
    "    while i<n:\n",
    "        j=0\n",
    "        while i<n:\n",
    "            if arr1[i]==arr2[j]:\n",
    "                j+=1\n",
    "                if j==n2:\n",
    "                    break\n",
    "            i+=1\n",
    "        if j<n2:\n",
    "           break\n",
    "        end=i\n",
    "        j=n2-1\n",
    "        while j>=0:\n",
    "            if arr1[i]==arr2[j]:\n",
    "                j-=1\n",
    "            i-=1\n",
    "        i+=1\n",
    "        if end-i+1<min_len:\n",
    "            min_len=end-i+1\n",
    "            start=i\n",
    "        i+=1\n",
    "    return \"\" if start == -1 else s1[start:start+min_len]\n",
    "            \n",
    "            \n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "0dfbc0dc-7152-49d9-9d2d-456e41508ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def substring(arr1,arr2):\n",
    "    n1=len(arr1)\n",
    "    n2=len(arr2)\n",
    "    min_len=float('len')\n",
    "    start=-1\n",
    "    while i<n1:\n",
    "        j=0\n",
    "        while i<n1:\n",
    "            if arr1(i)==arr2(j):\n",
    "                j+=1\n",
    "                if j==n2:\n",
    "                    break\n",
    "            i+=1\n",
    "        end=i\n",
    "        j=n2-1\n",
    "        while j>=0:\n",
    "            if arr1(i)==arr2(j):\n",
    "                j-=1\n",
    "            i-=1\n",
    "        i+=1\n",
    "        if end-i+1<min_len:\n",
    "            min_len=end-i+1\n",
    "            start=i\n",
    "        i+=1\n",
    "    return \"\" if start==-1 else s1[start:start+min_len]\n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "cb115de0-4a92-4cb4-9a20-4bd579ffc822",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def largest(arr,k):\n",
    "    maximum=float('-inf')\n",
    "    for i in range(len(arr)):\n",
    "        total=0\n",
    "        for j in range(i,len(arr)):\n",
    "            total+=arr[j]\n",
    "            if j-i+1>=k:\n",
    "                maximum=max(maximum,total)\n",
    "    return maximum\n",
    "largest([-4, -2, 1, -3],2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "4395f7f7-61e7-4032-8a9b-b9590e38fb34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def max_sum(arr, k):\n",
    "    n = len(arr)\n",
    "    res = float('-inf')\n",
    "\n",
    "    # Iterate over all possible starting points\n",
    "    for i in range(n):\n",
    "        sum_ = 0\n",
    "        \n",
    "        for j in range(i, n):\n",
    "            sum_ += arr[j]\n",
    "            \n",
    "            # If size of current subarray is k\n",
    "            # or more\n",
    "            if j - i + 1 >= k:\n",
    "                res = max(res, sum_)\n",
    "    return res\n",
    "max_sum([-4, -2, 1, -3],2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "256f002f-e544-4833-a3dc-5e66c19e8614",
   "metadata": {},
   "outputs": [],
   "source": [
    "def max_sum(arr,k):\n",
    "    n=len(arr)\n",
    "    res=float('inf')\n",
    "    i=0\n",
    "    while i<n:\n",
    "        sum=0\n",
    "        j=i\n",
    "        while j<n:\n",
    "            sum+=arr[j]\n",
    "            if j-i>=k:\n",
    "                res=max(res,sum)\n",
    "        i+=1\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "35131373-d4a1-4f06-b903-2cc99f46d81d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[180, 600, 360, 300, 900]"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def product(arr):\n",
    "    n=len(arr)\n",
    "    res=[1]*n\n",
    "    for i in range(n):\n",
    "        product=1\n",
    "        for j in range(n):\n",
    "            if i!=j:\n",
    "                product=product*(arr[j])\n",
    "                res[i]=product\n",
    "    return res\n",
    "product([10, 3, 5, 6, 2])\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "e71767b9-5af3-4715-bf1f-1d46d99881d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def longest(arr,k):\n",
    "    n=len(arr)\n",
    "    maximum=float('-inf')\n",
    "    for i in range(n):\n",
    "        total=0\n",
    "        for j in range(i,n):\n",
    "            total+=arr[j]\n",
    "            if total==k:\n",
    "                length=j-i+1\n",
    "                maximum=max(maximum,length)\n",
    "    return maximum\n",
    "longest([10, 5, 2, 7, 1, -10],15)\n",
    "                \n",
    "                \n",
    "            \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "5ee3a32b-716a-48f1-8ecd-219781920116",
   "metadata": {},
   "outputs": [],
   "source": [
    "def minimum(arr,k):\n",
    "    total=0\n",
    "    n=len(arr)\n",
    "    for i in arr:\n",
    "        total+=arr[i]\n",
    "    target=total-k\n",
    "    left=0\n",
    "    currsum=0\n",
    "    maxlen=-1\n",
    "    for right in range(n):\n",
    "        currsum+=arr[right]\n",
    "        while left < right and currSum > target:\n",
    "            currSum -= arr[left]\n",
    "            left += 1\n",
    "        if currsum==target:\n",
    "             maxLen = max(maxLen, right - left + 1)\n",
    "    return -1 if maxLen == -1 else n - maxLen\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "6b1134ee-5b98-470b-94c0-cff074356e71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def subarray(arr):\n",
    "    n=len(arr)\n",
    "    for i in range(n):\n",
    "        currsum=arr[i]\n",
    "        if currsum==0:\n",
    "            return True\n",
    "        for j in range(i+1,n):\n",
    "           currsum+=arr[j]\n",
    "           if currsum==0:\n",
    "               return True\n",
    "subarray([4, 2, -3, 1, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "d925c167-5f09-4b20-970f-1bf2dc1c8f5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def longest(arr1,arr2):\n",
    "    n=len(arr1)\n",
    "    maxlen=0\n",
    "    for i in range(n):\n",
    "        currsum1=0\n",
    "        currsum2=0\n",
    "        for j in range(i,n):\n",
    "            currsum1+=arr1[j]\n",
    "            currsum2+=arr2[j]\n",
    "            if currsum1==currsum2:\n",
    "                maxlen=j-i+1\n",
    "    return maxlen\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "4579fa09-554a-42a2-8f8c-8fae7a661bfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def maximum(arr,k):\n",
    "    n=len(arr)\n",
    "    res=0\n",
    "    for i in range(n):\n",
    "        currsum=0\n",
    "        for j in range(i,n):\n",
    "            currsum+=arr[j]\n",
    "            sum1=currsum%k\n",
    "            if sum1==0:\n",
    "                res+=1\n",
    "    return res\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "aba47508-a0b9-405f-9911-d7c0bd38d99a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def maxRectSum(mat):\n",
    "    n=len(mat)\n",
    "    m=len(mat[0])\n",
    "    maxsum=float('-inf')\n",
    "    for up in range(n):\n",
    "        for right in range(m):\n",
    "            for down in range(up,n):\n",
    "                for left in range(right,m):\n",
    "                    subsum=0\n",
    "                    for i in range(up,down+1):\n",
    "                        for j in range(left,right+1):\n",
    "                            subsum+=mat[i][j]\n",
    "                    maxsum=max(subsum,maxsum)\n",
    "    return maxsum\n",
    "maxRectSum([[1,2,3],[2,3,4],[4,5,6]])\n",
    "                    \n",
    "                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "a9a2c475-3f22-434b-9c57-f705dbf946ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ispower(arr):\n",
    "    arr1=[]\n",
    "    for i in arr:\n",
    "        while i%2==0:\n",
    "            i=i//2\n",
    "        if i==1:\n",
    "            arr1.append(1)\n",
    "        else:\n",
    "            arr1.append(0)\n",
    "    return arr1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "609ecbf1-4467-49c0-b5bd-37761f8af0e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def minimum(arr):\n",
    "    least=float('inf')\n",
    "    n=len(arr)\n",
    "    arr1=sorted(arr)\n",
    "    arr2=[]\n",
    "    for i in range (n+1):\n",
    "        difference=arr[i+1]-arr[i]\n",
    "        if difference<least:\n",
    "            least=difference\n",
    "            arr2=(arr[i],arr[i+1])\n",
    "        elif difference==least:\n",
    "            arr2.append(arr[i],arr[i+1])\n",
    "    return arr2\n",
    "        \n",
    "        \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6298f399-d0b2-492f-95db-b169198ff50a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
